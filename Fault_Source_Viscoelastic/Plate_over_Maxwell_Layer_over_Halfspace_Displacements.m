function U = Plate_over_Maxwell_Layer_over_Halfspace_Displacements(m,xloc,H1,H2,nu,t,tR1,tR2)

% U = Plate_over_Maxwell_Layer_over_Halfspace_Displacements(m,xloc,H1,H2,mu_lam,t,tR1,tR2)
%
% This code computes the velocities at surface points at a single time due to uniform slip
% on a rectangular dislocation in an elastic plate overlying a Maxwell
% viscoelastic layer that lies over a Maxwell viscoelastic halfspace. This code
% is an implementation of a semi-analytical propagator matrix solution. 
%
%%INPUTS:
%fault model (standard Okada paramterization):
% m(1) = length along strike(km)
% m(2) = down-dip width (km)
% m(3) = depth to down-dip edge (km)
% m(4) = dip (degrees)
% m(5) = strike (degrees)
% m(6) = east position of center of down-dip edge (km)
% m(7) = north position of center of down-dip edge (km)
% m(8) = strike-slip (m), positive is left-lateral, negative right-lateral
% m(9) = dip-slip (m), positive is reverse, negative is normal
% m(10)= tensile (m), powitive is opening, negative is closing
% xloc = 2xn matrix of n station coordinates (km) -- first row x, second row y
%  H1  =  thickness of elastic layer  (km)
%  H2  =  depth to bottom of viscoelastic layer -- km -- (same as top of half-space)
%  (scalar) nu  = Poisson's ratio (<0.5), uniform
%   t  = (scalar) time since earthquake (years)
%  tR1 = (scalar) Maxwell relaxation time (2*eta/mu, eta=viscosity, mu=shear modulus) of viscoelastic layer -- years
%  tR2 = (scalar) Maxwell relaxation time of viscoelastic halfspace -- years
%%OUTPUTS:
%U is a 3xn matrix of DISPLACEMENTS (first row east, second row north, third row up) 


%elastic moduli
mu = 1;
lam = 2*mu*nu/(1-2*nu);


xy=xloc'; 
%initialize basis vectors to zero
G1=zeros(3*size(xy,1),1);
G2=zeros(3*size(xy,1),1);
G3=zeros(3*size(xy,1),1);

%define components of slip
ss=m(8);
ds=m(9);
ten=m(10);

%convert parameters to be consistent with Okada
if m(4)<=90 & m(4)>=-90
   dipdir = (m(5) + 90)*pi/180;
else
   dipdir = (m(5) - 90)*pi/180;
end

offset = abs(m(2).*cos(m(4)*pi/180));
EastOff = offset.*sin(dipdir);
NorthOff = offset.*cos(dipdir);
xy(:,1)=xy(:,1)-m(6)+EastOff;
xy(:,2)=xy(:,2)-m(7)+NorthOff;

L=m(1);
W=m(2);
dip=m(4);
strike=m(5);
D=m(3)-W*sin(dip*pi/180);


Xcoord=xy(:,2);	%switch x and y
Ycoord=xy(:,1);

bulk=lam+2*mu/3;   %bulk modulus
g=lam+2*mu;
beta1 = 1/tR1;
beta2 = 1/tR2;


%position of point sources
%setup spacing of point sources for Gaussian quadrature
%number of point sources near ground surface
   

%NL=ceil(.0075*m(1));
NL=ceil(.05*m(1));
NW=ceil(.05*m(2));



u=(1:NL-1)./sqrt((2*(1:NL-1)).^2-1);
	[vc,bp]=eig(diag(u,-1)+diag(u,1));
	[bp,k]=sort(diag(bp));
	a=-L/2;b=L/2;
	wL=(2*vc(1,k).^2)*(b-a)/2;
	xp=(a+b)/2+(b-a)/2*bp;

	u=(1:NW-1)./sqrt((2*(1:NW-1)).^2-1);
	[vc,bp]=eig(diag(u,-1)+diag(u,1));
	[bp,k]=sort(diag(bp));
   
   a=0;b=W;


   wW=(2*vc(1,k).^2)*(b-a)/2;
	yp=(a+b)/2+(b-a)/2*bp;
   
[xp,yp]=meshgrid(xp,yp);   
  
xp=xp(:)';
yp=yp(:)';
zp=zeros(size(xp));


wW=repmat(wW,size(xy,1),1);
wW=repmat(wW,[1 1 NL]);
wL=reshape(wL,[1 1 NL]);
wL=repmat(wL,size(xy,1),NW);

%mesh points
%rotate into true position
%rotate plane to true dip
R=[1 0 0;0 cos(dip*pi/180) -sin(dip*pi/180);0 sin(dip*pi/180) cos(dip*pi/180)];	%rotation matrix x-axis
Xp=R*[xp;yp;zp];
%rotate to true strike
R=[cos(strike*pi/180) -sin(strike*pi/180) 0;sin(strike*pi/180) cos(strike*pi/180) 0;0 0 1];	%rotation matrix about z-axis
Xp=R*Xp;
xpos=Xp(1,:);
ypos=Xp(2,:);
zpos=Xp(3,:);
xpos=reshape(xpos,NW,NL);
ypos=reshape(ypos,NW,NL);
zpos=zpos(1:NW);


for psW=1:NW

      
zs=D+zpos(psW);		%depth of point source

ZS=zs;
if zs<0
   disp('Warning: fault extends above ground surface')
end


NN=100;
N=100;
%kmax=.0625;
kmax=.5;
k=linspace(0.000001,kmax,NN);
K=k;

kstore{psW}=K;
Nstore{psW}=NN;

[M1,M2,M3]=momtensor_inverse(strike,dip,lam,mu);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%calculate Bessel coefficients

for j=1:N
   
[sourceP4x4,sourceP2x2,halfspaceP4x4,halfspaceP2x2]=getprop(H1,k,j,mu,lam,g,zs);
 
Ph2=halfspaceP2x2;
Ph4=halfspaceP4x4;

%% make source vectors and get bessel coefficients

if ss~=0
   [UR_0_1(:,j),US_0_1(:,j), ...
         UR_n1_1(:,j),US_n1_1(:,j),UT_n1_1(:,j), ...
         UR_p1_1(:,j),US_p1_1(:,j),UT_p1_1(:,j), ...
         UR_n2_1(:,j),US_n2_1(:,j),UT_n2_1(:,j), ...
         UR_p2_1(:,j),US_p2_1(:,j),UT_p2_1(:,j)]=getbesselco(Ph2,Ph4,sourceP4x4,...
         sourceP2x2,M1,g,k,bulk,j,lam,mu,beta1,beta2,H1,H2,t);

end

if ds~=0
[UR_0_2(:,j),US_0_2(:,j), ...
         UR_n1_2(:,j),US_n1_2(:,j),UT_n1_2(:,j), ...
         UR_p1_2(:,j),US_p1_2(:,j),UT_p1_2(:,j), ...
         UR_n2_2(:,j),US_n2_2(:,j),UT_n2_2(:,j), ...
         UR_p2_2(:,j),US_p2_2(:,j),UT_p2_2(:,j)]=getbesselco(Ph2,Ph4,sourceP4x4,...
         sourceP2x2,M2,g,k,bulk,j,lam,mu,beta1,beta2,H1,H2,t);
end

if ten~=0
[UR_0_3(:,j),US_0_3(:,j), ...
         UR_n1_3(:,j),US_n1_3(:,j),UT_n1_3(:,j), ...
         UR_p1_3(:,j),US_p1_3(:,j),UT_p1_3(:,j), ...
         UR_n2_3(:,j),US_n2_3(:,j),UT_n2_3(:,j), ...
         UR_p2_3(:,j),US_p2_3(:,j),UT_p2_3(:,j)]=getbesselco(Ph2,Ph4,sourceP4x4,...
         sourceP2x2,M3,g,k,bulk,j,lam,mu,beta1,beta2,H1,H2,t);
end

end %j

if ss~=0
	   UR_0_1s{psW}=UR_0_1;
      US_0_1s{psW}=US_0_1;
      
  	   UR_n1_1s{psW}=UR_n1_1;
      US_n1_1s{psW}=US_n1_1;
      UT_n1_1s{psW}=UT_n1_1;
      
  	   UR_p1_1s{psW}=UR_p1_1;
      US_p1_1s{psW}=US_p1_1;
      UT_p1_1s{psW}=UT_p1_1;
      
  	   UR_n2_1s{psW}=UR_n2_1;
      US_n2_1s{psW}=US_n2_1;
      UT_n2_1s{psW}=UT_n2_1;
      
  	   UR_p2_1s{psW}=UR_p2_1;
      US_p2_1s{psW}=US_p2_1;
      UT_p2_1s{psW}=UT_p2_1;
end
   
if ds~=0
	   UR_0_2s{psW}=UR_0_2;
      US_0_2s{psW}=US_0_2;
      
  	   UR_n1_2s{psW}=UR_n1_2;
      US_n1_2s{psW}=US_n1_2;
      UT_n1_2s{psW}=UT_n1_2;
      
  	   UR_p1_2s{psW}=UR_p1_2;
      US_p1_2s{psW}=US_p1_2;
      UT_p1_2s{psW}=UT_p1_2;
      
  	   UR_n2_2s{psW}=UR_n2_2;
      US_n2_2s{psW}=US_n2_2;
      UT_n2_2s{psW}=UT_n2_2;
      
  	   UR_p2_2s{psW}=UR_p2_2;
      US_p2_2s{psW}=US_p2_2;
      UT_p2_2s{psW}=UT_p2_2;
end

if ten~=0
	   UR_0_3s{psW}=UR_0_3;
      US_0_3s{psW}=US_0_3;
      
  	   UR_n1_3s{psW}=UR_n1_3;
      US_n1_3s{psW}=US_n1_3;
      UT_n1_3s{psW}=UT_n1_3;
      
  	   UR_p1_3s{psW}=UR_p1_3;
      US_p1_3s{psW}=US_p1_3;
      UT_p1_3s{psW}=UT_p1_3;
      
  	   UR_n2_3s{psW}=UR_n2_3;
      US_n2_3s{psW}=US_n2_3;
      UT_n2_3s{psW}=UT_n2_3;
      
  	   UR_p2_3s{psW}=UR_p2_3;
      US_p2_3s{psW}=US_p2_3;
      UT_p2_3s{psW}=UT_p2_3;
end


end %psW


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%inverse HT into physical space

for psW=1:NW

   for psL=1:NL


xshift=repmat(xpos(psW,psL),length(Xcoord),1);
yshift=repmat(ypos(psW,psL),length(Xcoord),1);

X=Xcoord-xshift;
Y=Ycoord-yshift;

r=sqrt(X.^2+Y.^2);
theta=atan2(Y,X);


k=kstore{psW};
N=Nstore{psW};     




rr=r;
kk=k;
r=repmat(r,1,length(k));
k=repmat(k,length(rr),1);
kr=k.*r;
theta_orig=theta;
theta=repmat(theta,1,N);

if ss~=0
UR_0_1=repmat(UR_0_1s{psW},length(rr),1);
US_0_1=repmat(US_0_1s{psW},length(rr),1);
UR_n1_1=repmat(UR_n1_1s{psW},length(rr),1);
US_n1_1=repmat(US_n1_1s{psW},length(rr),1);
UT_n1_1=repmat(UT_n1_1s{psW},length(rr),1);

UR_p1_1=repmat(UR_p1_1s{psW},length(rr),1);
US_p1_1=repmat(US_p1_1s{psW},length(rr),1);
UT_p1_1=repmat(UT_p1_1s{psW},length(rr),1);

UR_n2_1=repmat(UR_n2_1s{psW},length(rr),1);
US_n2_1=repmat(US_n2_1s{psW},length(rr),1);
UT_n2_1=repmat(UT_n2_1s{psW},length(rr),1);

UR_p2_1=repmat(UR_p2_1s{psW},length(rr),1);
US_p2_1=repmat(US_p2_1s{psW},length(rr),1);
UT_p2_1=repmat(UT_p2_1s{psW},length(rr),1);
end


if ds~=0
UR_0_2=repmat(UR_0_2s{psW},length(rr),1);
US_0_2=repmat(US_0_2s{psW},length(rr),1);
UR_n1_2=repmat(UR_n1_2s{psW},length(rr),1);
US_n1_2=repmat(US_n1_2s{psW},length(rr),1);
UT_n1_2=repmat(UT_n1_2s{psW},length(rr),1);

UR_p1_2=repmat(UR_p1_2s{psW},length(rr),1);
US_p1_2=repmat(US_p1_2s{psW},length(rr),1);
UT_p1_2=repmat(UT_p1_2s{psW},length(rr),1);

UR_n2_2=repmat(UR_n2_2s{psW},length(rr),1);
US_n2_2=repmat(US_n2_2s{psW},length(rr),1);
UT_n2_2=repmat(UT_n2_2s{psW},length(rr),1);

UR_p2_2=repmat(UR_p2_2s{psW},length(rr),1);
US_p2_2=repmat(US_p2_2s{psW},length(rr),1);
UT_p2_2=repmat(UT_p2_2s{psW},length(rr),1);
end

if ten~=0
UR_0_3=repmat(UR_0_3s{psW},length(rr),1);
US_0_3=repmat(US_0_3s{psW},length(rr),1);
UR_n1_3=repmat(UR_n1_3s{psW},length(rr),1);
US_n1_3=repmat(US_n1_3s{psW},length(rr),1);
UT_n1_3=repmat(UT_n1_3s{psW},length(rr),1);

UR_p1_3=repmat(UR_p1_3s{psW},length(rr),1);
US_p1_3=repmat(US_p1_3s{psW},length(rr),1);
UT_p1_3=repmat(UT_p1_3s{psW},length(rr),1);

UR_n2_3=repmat(UR_n2_3s{psW},length(rr),1);
US_n2_3=repmat(US_n2_3s{psW},length(rr),1);
UT_n2_3=repmat(UT_n2_3s{psW},length(rr),1);

UR_p2_3=repmat(UR_p2_3s{psW},length(rr),1);
US_p2_3=repmat(US_p2_3s{psW},length(rr),1);
UT_p2_3=repmat(UT_p2_3s{psW},length(rr),1);
end


M=0;

b0=besselj(0,kr);
b1=besselj(1,kr);
b2=-b0+2./kr.*b1;
b3=-b1+4./kr.*b2;

DrJm=-k.*b1;

   if ss~=0
	Uz_integrand_1=k.*UR_0_1.*b0;
	Ur_integrand_1=US_0_1.*DrJm;
	end
   
   if ds~=0
   Uz_integrand_2=k.*UR_0_2.*b0;
   Ur_integrand_2=US_0_2.*DrJm;
	end
   
   if ten~=0
   Uz_integrand_3=k.*UR_0_3.*b0;
   Ur_integrand_3=US_0_3.*DrJm;
	end


if ss~=0
Uz_1(:,1)=(1/(2*pi))*trapz(kk,Uz_integrand_1,2);
Ur_1(:,1)=real((1/(2*pi))*trapz(kk,Ur_integrand_1,2));
Utheta_1(:,1)=zeros(length(rr),1);
end

if ds~=0
Uz_2(:,1)=(1/(2*pi))*trapz(kk,Uz_integrand_2,2);
Ur_2(:,1)=real((1/(2*pi))*trapz(kk,Ur_integrand_2,2));
Utheta_2(:,1)=zeros(length(rr),1);
end

if ten~=0
Uz_3(:,1)=(1/(2*pi))*trapz(kk,Uz_integrand_3,2);
Ur_3(:,1)=real((1/(2*pi))*trapz(kk,Ur_integrand_3,2));
Utheta_3(:,1)=zeros(length(rr),1);
end

M=-1;
DrJm=.5*k.*(b2-b0);
   
   if ss~=0
	Uz_integrand_1=-k.*UR_n1_1.*b1.*exp(i*M*theta);
	Ur_integrand_1=(US_n1_1.*DrJm - i*M*UT_n1_1.*(1./r).*b1).*exp(i*M*theta);
	end
   
   if ds~=0
	Uz_integrand_2=-k.*UR_n1_2.*b1.*exp(i*M*theta);
	Ur_integrand_2=(US_n1_2.*DrJm - i*M*UT_n1_2.*(1./r).*b1).*exp(i*M*theta);
	end
   
   if ten~=0
 	Uz_integrand_3=-k.*UR_n1_3.*b1.*exp(i*M*theta);
	Ur_integrand_3=(US_n1_3.*DrJm - i*M*UT_n1_3.*(1./r).*b1).*exp(i*M*theta);
	end


if ss~=0
Uz_1(:,2)=(1/(2*pi))*trapz(kk,Uz_integrand_1,2);
Ur_1(:,2)=real((1/(2*pi))*trapz(kk,Ur_integrand_1,2));
end

if ds~=0
Uz_2(:,2)=(1/(2*pi))*trapz(kk,Uz_integrand_2,2);
Ur_2(:,2)=real((1/(2*pi))*trapz(kk,Ur_integrand_2,2));
Utheta_2(:,2)=zeros(length(rr),1);
end

if ten~=0
Uz_3(:,2)=(1/(2*pi))*trapz(kk,Uz_integrand_3,2);
Ur_3(:,2)=real((1/(2*pi))*trapz(kk,Ur_integrand_3,2));
Utheta_3(:,2)=zeros(length(rr),1);
end

M=1;
DrJm=.5*k.*(b0-b2);

   if ss~=0
	Uz_integrand_1=k.*UR_p1_1.*b1.*exp(i*M*theta);
	Ur_integrand_1=(US_p1_1.*DrJm + i*M*UT_p1_1.*(1./r).*b1).*exp(i*M*theta);
	end
   
   if ds~=0
	Uz_integrand_2=k.*UR_p1_2.*b1.*exp(i*M*theta);
	Ur_integrand_2=(US_p1_2.*DrJm + i*M*UT_p1_2.*(1./r).*b1).*exp(i*M*theta);
	end
   
   if ten~=0
	Uz_integrand_3=k.*UR_p1_3.*b1.*exp(i*M*theta);
	Ur_integrand_3=(US_p1_3.*DrJm + i*M*UT_p1_3.*(1./r).*b1).*exp(i*M*theta);
	end


if ss~=0
Uz_1(:,3)=(1/(2*pi))*trapz(kk,Uz_integrand_1,2);
Ur_1(:,3)=real((1/(2*pi))*trapz(kk,Ur_integrand_1,2));
Utheta_1(:,3)=zeros(length(rr),1);
end

if ds~=0
Uz_2(:,3)=(1/(2*pi))*trapz(kk,Uz_integrand_2,2);
Ur_2(:,3)=real((1/(2*pi))*trapz(kk,Ur_integrand_2,2));
Utheta_2(:,3)=zeros(length(rr),1);
end

if ten~=0
Uz_3(:,3)=(1/(2*pi))*trapz(kk,Uz_integrand_3,2);
Ur_3(:,3)=real((1/(2*pi))*trapz(kk,Ur_integrand_3,2));
Utheta_3(:,3)=zeros(length(rr),1);
end


M=-2;
DrJm=.5*k.*(b1-b3);
   
   if ss~=0
	Uz_integrand_1=k.*UR_n2_1.*b2.*exp(i*M*theta);
	Ur_integrand_1=(US_n2_1.*DrJm + i*M*UT_n2_1.*(1./r).*b2).*exp(i*M*theta);
	Utheta_integrand_1=(i*M*US_n2_1.*(1./r).*b2 - UT_n2_1.*DrJm).*exp(i*M*theta);
	end
   
   if ds~=0
	Uz_integrand_2=k.*UR_n2_2.*b2.*exp(i*M*theta);
	Ur_integrand_2=(US_n2_2.*DrJm + i*M*UT_n2_2.*(1./r).*b2).*exp(i*M*theta);
	Utheta_integrand_2=(i*M*US_n2_2.*(1./r).*b2 - UT_n2_2.*DrJm).*exp(i*M*theta);
  	end  
  
   if ten~=0
	Uz_integrand_3=k.*UR_n2_3.*b2.*exp(i*M*theta);
	Ur_integrand_3=(US_n2_3.*DrJm + i*M*UT_n2_3.*(1./r).*b2).*exp(i*M*theta);
	Utheta_integrand_3=(i*M*US_n2_3.*(1./r).*b2 - UT_n2_3.*DrJm).*exp(i*M*theta);
	end  

if ss~=0
Uz_1(:,4)=(1/(2*pi))*trapz(kk,Uz_integrand_1,2);
Ur_1(:,4)=real((1/(2*pi))*trapz(kk,Ur_integrand_1,2));
Utheta_1(:,4)=real((1/(2*pi))*trapz(kk,Utheta_integrand_1,2));
end

if ds~=0
Uz_2(:,4)=(1/(2*pi))*trapz(kk,Uz_integrand_2,2);
Ur_2(:,4)=real((1/(2*pi))*trapz(kk,Ur_integrand_2,2));
Utheta_2(:,4)=real((1/(2*pi))*trapz(kk,Utheta_integrand_2,2));
end

if ten~=0
Uz_3(:,4)=(1/(2*pi))*trapz(kk,Uz_integrand_3,2);
Ur_3(:,4)=real((1/(2*pi))*trapz(kk,Ur_integrand_3,2));
Utheta_3(:,4)=real((1/(2*pi))*trapz(kk,Utheta_integrand_3,2));
end


M=2;
DrJm=.5*k.*(b1-b3);
   
   if ss~=0
	Uz_integrand_1=k.*UR_p2_1.*b2.*exp(i*M*theta);
	Ur_integrand_1=(US_p2_1.*DrJm + i*M*UT_p2_1.*(1./r).*b2).*exp(i*M*theta);
	Utheta_integrand_1=(i*M*US_p2_1.*(1./r).*b2 - UT_p2_1.*DrJm).*exp(i*M*theta);
	end
   
   if ds~=0
	Uz_integrand_2=k.*UR_p2_2.*b2.*exp(i*M*theta);
	Ur_integrand_2=(US_p2_2.*DrJm + i*M*UT_p2_2.*(1./r).*b2).*exp(i*M*theta);
	Utheta_integrand_2=(i*M*US_p2_2.*(1./r).*b2 - UT_p2_2.*DrJm).*exp(i*M*theta);
  	end  
  
   if ten~=0
	Uz_integrand_3=k.*UR_p2_3.*b2.*exp(i*M*theta);
	Ur_integrand_3=(US_p2_3.*DrJm + i*M*UT_p2_3.*(1./r).*b2).*exp(i*M*theta);
	Utheta_integrand_3=(i*M*US_p2_3.*(1./r).*b2 - UT_p2_3.*DrJm).*exp(i*M*theta);
	end  

if ss~=0
Uz_1(:,5)=(1/(2*pi))*trapz(kk,Uz_integrand_1,2);
Ur_1(:,5)=real((1/(2*pi))*trapz(kk,Ur_integrand_1,2));
Utheta_1(:,5)=real((1/(2*pi))*trapz(kk,Utheta_integrand_1,2));
end

if ds~=0
Uz_2(:,5)=(1/(2*pi))*trapz(kk,Uz_integrand_2,2);
Ur_2(:,5)=real((1/(2*pi))*trapz(kk,Ur_integrand_2,2));
Utheta_2(:,5)=real((1/(2*pi))*trapz(kk,Utheta_integrand_2,2));
end

if ten~=0
Uz_3(:,5)=(1/(2*pi))*trapz(kk,Uz_integrand_3,2);
Ur_3(:,5)=real((1/(2*pi))*trapz(kk,Ur_integrand_3,2));
Utheta_3(:,5)=real((1/(2*pi))*trapz(kk,Utheta_integrand_3,2));
end



if ss~=0
Gz_1(:,psW,psL)=sum(Uz_1,2);
UR=sum(Ur_1,2);
UTHETA=sum(Utheta_1,2);
Urx=UR.*cos(theta_orig);
Ury=UR.*sin(theta_orig);
Uthetax=UTHETA.*cos(theta_orig+pi/2);
Uthetay=UTHETA.*sin(theta_orig+pi/2);
Gx_1(:,psW,psL)=Urx+Uthetax;
Gy_1(:,psW,psL)=Ury+Uthetay;
end


if ds~=0
Gz_2(:,psW,psL)=sum(Uz_2,2);
UR=sum(Ur_2,2);
UTHETA=sum(Utheta_2,2);
Urx=UR.*cos(theta_orig);
Ury=UR.*sin(theta_orig);
Uthetax=UTHETA.*cos(theta_orig+pi/2);
Uthetay=UTHETA.*sin(theta_orig+pi/2);
Gx_2(:,psW,psL)=Urx+Uthetax;
Gy_2(:,psW,psL)=Ury+Uthetay;
end

if ten~=0
Gz_3(:,psW,psL)=sum(Uz_3,2);
UR=sum(Ur_3,2);
UTHETA=sum(Utheta_3,2);
Urx=UR.*cos(theta_orig);
Ury=UR.*sin(theta_orig);
Uthetax=UTHETA.*cos(theta_orig+pi/2);
Uthetay=UTHETA.*sin(theta_orig+pi/2);
Gx_3(:,psW,psL)=Urx+Uthetax;
Gy_3(:,psW,psL)=Ury+Uthetay;
end


end %psW
end %psL


if ss~=0
   
   Gx_1=wW.*wL.*Gx_1;
   Gy_1=wW.*wL.*Gy_1;
   Gz_1=wW.*wL.*Gz_1;
   
   Gx_1=sum(sum(Gx_1,2),3);
	Gy_1=sum(sum(Gy_1,2),3);
	Gz_1=sum(sum(Gz_1,2),3);

	G1=zeros(3*length(Gy_1),1);
	G1(1:3:end)=Gy_1;
	G1(2:3:end)=Gx_1;
	G1(3:3:end)=-Gz_1;
end

if ds~=0
   
   Gx_2=wW.*wL.*Gx_2;
   Gy_2=wW.*wL.*Gy_2;
   Gz_2=wW.*wL.*Gz_2;
   
   Gx_2=sum(sum(Gx_2,2),3);
	Gy_2=sum(sum(Gy_2,2),3);
	Gz_2=sum(sum(Gz_2,2),3);

	G2=zeros(3*length(Gy_2),1);
	G2(1:3:end)=Gy_2;
	G2(2:3:end)=Gx_2;
   G2(3:3:end)=-Gz_2;
end

if ten~=0
   
   Gx_3=wW.*wL.*Gx_3;
   Gy_3=wW.*wL.*Gy_3;
   Gz_3=wW.*wL.*Gz_3;
   
   Gx_3=sum(sum(Gx_3,2),3);
	Gy_3=sum(sum(Gy_3,2),3);
	Gz_3=sum(sum(Gz_3,2),3);

	G3=zeros(3*length(Gy_3),1);
	G3(1:3:end)=Gy_3;
	G3(2:3:end)=Gx_3;
   G3(3:3:end)=-Gz_3;
end


if ss==0
   G1=zeros(size(xloc,2)*3,1);
end
if ds==0
   G2=zeros(size(xloc,2)*3,1);
end
if ten==0
   G3=zeros(size(xloc,2)*3,1);
end


%change sign to be consistent with Okada's definition of slip
G2=-G2;

%%output displacments in matrix U
U=zeros(3,length(G1)/3);
%scale displacements with slip
temp=ss*G1+ds*G2+ten*G3;
U(1,:)=temp(1:3:end)';
U(2,:)=temp(2:3:end)';
U(3,:)=temp(3:3:end)';      %U is 3xn matrix of displacements


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% sub functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [M1,M2,M3]=momtensor_inverse(strike,dip,lam,mu)

strike=strike*pi/180;
dip=dip*pi/180;

Vs=[cos(strike) sin(strike) 0]';
Vd=[-cos(dip)*sin(strike) cos(dip)*cos(strike) sin(dip)]';
Vnorm=cross(Vd,Vs);

%moment tensor
%strike slip component
M1(1,1)=Vs(1)*Vnorm(1)*(lam+2*mu)+Vs(2)*Vnorm(2)*lam+Vs(3)*Vnorm(3)*lam;
M1(2,2)=Vs(1)*Vnorm(1)*lam+Vs(2)*Vnorm(2)*(lam+2*mu)+Vs(3)*Vnorm(3)*lam;
M1(3,3)=Vs(1)*Vnorm(1)*lam+Vs(2)*Vnorm(2)*lam+Vs(3)*Vnorm(3)*(lam+2*mu);
M1(1,2)=Vs(1)*Vnorm(2)*mu+Vs(2)*Vnorm(1)*mu;
M1(1,3)=Vs(1)*Vnorm(3)*mu+Vs(3)*Vnorm(1)*mu;
M1(2,3)=Vs(2)*Vnorm(3)*mu+Vs(3)*Vnorm(2)*mu;
M1(2,1)=M1(1,2);M1(3,1)=M1(1,3);M1(3,2)=M1(2,3);
%dip slip component
M2(1,1)=Vd(1)*Vnorm(1)*(lam+2*mu)+Vd(2)*Vnorm(2)*lam+Vd(3)*Vnorm(3)*lam;
M2(2,2)=Vd(1)*Vnorm(1)*lam+Vd(2)*Vnorm(2)*(lam+2*mu)+Vd(3)*Vnorm(3)*lam;
M2(3,3)=Vd(1)*Vnorm(1)*lam+Vd(2)*Vnorm(2)*lam+Vd(3)*Vnorm(3)*(lam+2*mu);
M2(1,2)=Vd(1)*Vnorm(2)*mu+Vd(2)*Vnorm(1)*mu;
M2(1,3)=Vd(1)*Vnorm(3)*mu+Vd(3)*Vnorm(1)*mu;
M2(2,3)=Vd(2)*Vnorm(3)*mu+Vd(3)*Vnorm(2)*mu;
M2(2,1)=M2(1,2);M2(3,1)=M2(1,3);M2(3,2)=M2(2,3);
%tensile component
M3(1,1)=Vnorm(1)*Vnorm(1)*(lam+2*mu)+Vnorm(2)*Vnorm(2)*lam+Vnorm(3)*Vnorm(3)*lam;
M3(2,2)=Vnorm(1)*Vnorm(1)*lam+Vnorm(2)*Vnorm(2)*(lam+2*mu)+Vnorm(3)*Vnorm(3)*lam;
M3(3,3)=Vnorm(1)*Vnorm(1)*lam+Vnorm(2)*Vnorm(2)*lam+Vnorm(3)*Vnorm(3)*(lam+2*mu);
M3(1,2)=Vnorm(1)*Vnorm(2)*mu+Vnorm(2)*Vnorm(1)*mu;
M3(1,3)=Vnorm(1)*Vnorm(3)*mu+Vnorm(3)*Vnorm(1)*mu;
M3(2,3)=Vnorm(2)*Vnorm(3)*mu+Vnorm(3)*Vnorm(2)*mu;
M3(2,1)=M3(1,2);M3(3,1)=M3(1,3);M3(3,2)=M3(2,3);

temp=M1./max(max(abs(M1)));
index=logical(abs(temp)<10^-13);
M1(index)=0;

temp=M2./max(max(abs(M2)));
index=logical(abs(temp)<10^-13);
M2(index)=0;

temp=M3./max(max(abs(M3)));
index=logical(abs(temp)<10^-13);
M3(index)=0;


function [sourceP4x4,sourceP2x2,halfspaceP4x4,halfspaceP2x2]=getprop(H,k,j,mu,lam,g,zs)
%subroutine to generate propagator matrices

A4x4=[0 k(j) 1/mu 0;-k(j)*lam/g 0 0 1/g;4*k(j)^2*mu*(lam+mu)/g 0 0 k(j)*lam/g;0 0 -k(j) 0];

%need to check the sign
rg=3*10^-3;
G=[1 0 0 0;0 1 0 0;0 0 1 0;0 -rg 0 1];

z=0;
z0=H;
C3=-(sinh(k(j)*(z-z0))-k(j)*(z-z0)*cosh(k(j)*(z-z0)))/(2*k(j)^3);
C2=k(j)*(z-z0)*sinh(k(j)*(z-z0))/(2*k(j)^2);
C1=(3*sinh(k(j)*(z-z0))-k(j)*(z-z0)*cosh(k(j)*(z-z0)))/(2*k(j));
C0=(2*cosh(k(j)*(z-z0))-k(j)*(z-z0)*sinh(k(j)*(z-z0)))/2;
P4x4(:,:)=C3*A4x4^3+C2*A4x4^2+C1*A4x4+C0*eye(4);
P2x2(1,:)=[cosh((z-z0)*abs(k(j))) (1/(mu*abs(k(j))))*sinh((z-z0)*abs(k(j)))];
P2x2(2,:)=[mu*abs(k(j))*sinh((z-z0)*abs(k(j))) cosh((z-z0)*abs(k(j)))];

halfspaceP4x4=G*P4x4;
halfspaceP2x2=P2x2;

%propagator from source to top of layer containing source
z=0;
z0=zs;
C3=-(sinh(k(j)*(z-z0))-k(j)*(z-z0)*cosh(k(j)*(z-z0)))/(2*k(j)^3);
C2=k(j)*(z-z0)*sinh(k(j)*(z-z0))/(2*k(j)^2);
C1=(3*sinh(k(j)*(z-z0))-k(j)*(z-z0)*cosh(k(j)*(z-z0)))/(2*k(j));
C0=(2*cosh(k(j)*(z-z0))-k(j)*(z-z0)*sinh(k(j)*(z-z0)))/2;
A4x4=[0 k(j) 1/mu 0;-k(j)*lam/g 0 0 1/g;4*k(j)^2*mu*(lam+mu)/g 0 0 k(j)*lam/g;0 0 -k(j) 0];
P4x4zs=C3*A4x4^3+C2*A4x4^2+C1*A4x4+C0*eye(4);
P2x2zs(1,:)=[cosh((z-z0)*abs(k(j))) (1/(mu*abs(k(j))))*sinh((z-z0)*abs(k(j)))];
P2x2zs(2,:)=[mu*abs(k(j))*sinh((z-z0)*abs(k(j))) cosh((z-z0)*abs(k(j)))];

sourceP4x4=G*P4x4zs;
sourceP2x2=P2x2zs;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%subroutine to generate bessel coefficients
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [UR_0,US_0,UR_n1,US_n1,UT_n1,UR_p1,US_p1,UT_p1,...
      UR_n2,US_n2,UT_n2,UR_p2,US_p2,UT_p2]=getbesselco(Ph2,Ph4,sourceP4x4,...
      sourceP2x2,M,g,k,K,j,lam,mu,B1,B2,H1,H2,t)

        
Pzs4=sourceP4x4;
Pzs2=sourceP2x2;

Mxx=M(1,1);
Myy=M(2,2);
Mzz=M(3,3);
Mxy=M(1,2);
Mxz=M(1,3);
Myz=M(2,3);

%point source
%order = 0
F1_0=0;
F2_0=Mzz/g;
F3_0=k(j)*((-Mxx-Myy)/2+lam*Mzz/g);

%order = -1
F1_n1=-1/2*(Mxz+i*Myz)/mu;
F2_n1=0;
F3_n1=0;
f1_n1=1/2*(Myz-i*Mxz)/mu;
f2_n1=0;

%order = 1
F1_p1=-1/2*(-Mxz+i*Myz)/mu;
F2_p1=0;
F3_p1=0;
f1_p1=-1/2*(Myz+i*Mxz)/mu;
f2_p1=0;

%order = -2
F1_n2=0;
F2_n2=0;
F3_n2=k(j)*(-(Myy-Mxx)/4+i*Mxy/2);
f1_n2=0;
f2_n2=k(j)*(i*(Mxx-Myy)/4-1/2*Mxy);  

%order = -2
F1_p2=0;
F2_p2=0;
F3_p2=k(j)*(-(Myy-Mxx)/4-i*Mxy/2);
f1_p2=0;
f2_p2=k(j)*(-i*(Mxx-Myy)/4-1/2*Mxy); 


   %order = 0
   F4x4=[F1_0;F2_0;F3_0;0];
    Pzsf=  Pzs4(3:4,:)*F4x4;
	
    	%compute roots
	[Nu11,Nu21,R,a] = roots_2visc([1 0],B1,B2,K,k(j),H1-H2,Ph4,mu);
    [Nu12,Nu22,R,a] = roots_2visc([0 1],B1,B2,K,k(j),H1-H2,Ph4,mu);
 
    Nu1 = Nu11*Pzsf(1) + Nu21*Pzsf(2);
    Nu2 = Nu12*Pzsf(1) + Nu22*Pzsf(2);
    
   
    s=R(2);
    Den = a*s*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term11 = Num1*(exp(s*t) -1)/Den;
    term21 = Num2*(exp(s*t) -1)/Den;
    
    s=R(3);
    Den = a*s*(s-R(2))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term12 = Num1*(exp(s*t) -1)/Den;
    term22 = Num2*(exp(s*t) -1)/Den;
  
    s=R(4);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term13 = Num1*(exp(s*t) -1)/Den;
    term23 = Num2*(exp(s*t) -1)/Den;
  
    s=R(5);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term14 = Num1*(exp(s*t) -1)/Den;
    term24 = Num2*(exp(s*t) -1)/Den;
  
    s=R(6);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term15 = Num1*(exp(s*t) -1)/Den;
    term25 = Num2*(exp(s*t) -1)/Den;
  
    s=R(7);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term16 = Num1*(exp(s*t) -1)/Den;
    term26 = Num2*(exp(s*t) -1)/Den;
  
 
    s=R(8);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term17 = Num1*(exp(s*t) -1)/Den;
    term27 = Num2*(exp(s*t) -1)/Den;
  
   u1 = term11 + term12 + term13 + term14+ term15+ term16+ term17;
   u2 = term21 + term22 + term23 + term24+ term25+ term26+ term27;
   
   US_0 = u1;
   UR_0 = -u2;
  
   %order = -1
    F4x4=[F1_n1;F2_n1;F3_n1;0];
    Pzsf=  Pzs4(3:4,:)*F4x4;
	
    Nu1 = Nu11*Pzsf(1) + Nu21*Pzsf(2);
    Nu2 = Nu12*Pzsf(1) + Nu22*Pzsf(2);
     
    s=R(2);
    Den = a*s*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term11 = Num1*(exp(s*t) -1)/Den;
    term21 = Num2*(exp(s*t) -1)/Den;
    
    s=R(3);
    Den = a*s*(s-R(2))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term12 = Num1*(exp(s*t) -1)/Den;
    term22 = Num2*(exp(s*t) -1)/Den;
  
    s=R(4);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term13 = Num1*(exp(s*t) -1)/Den;
    term23 = Num2*(exp(s*t) -1)/Den;
  
    s=R(5);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term14 = Num1*(exp(s*t) -1)/Den;
    term24 = Num2*(exp(s*t) -1)/Den;
  
    s=R(6);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term15 = Num1*(exp(s*t) -1)/Den;
    term25 = Num2*(exp(s*t) -1)/Den;
  
    s=R(7);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term16 = Num1*(exp(s*t) -1)/Den;
    term26 = Num2*(exp(s*t) -1)/Den;
  
 
    s=R(8);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term17 = Num1*(exp(s*t) -1)/Den;
    term27 = Num2*(exp(s*t) -1)/Den;
 
   u1 = term11 + term12 + term13 + term14+ term15+ term16+ term17;
   u2 = term21 + term22 + term23 + term24+ term25+ term26+ term27;
	   
   US_n1 = u1;
   UR_n1 = -u2;
  
  
%2x2 system
F2x2=[f1_n1;f2_n1];
Pzsf=Pzs2*F2x2;
%[N1,N2,N3,R2,a2] = roots_2visc_antiplane(Pzsf,B1,B2,k(j),H1-H2,Ph2,mu);  %negative sign becaue this is for k>0
[N11,N21,N31,R2,a2] = roots_2visc_antiplane([1 0],B1,B2,k(j),H1-H2,Ph2,mu);  %negative sign becaue this is for k>0
[N12,N22,N32,R2,a2] = roots_2visc_antiplane([0 1],B1,B2,k(j),H1-H2,Ph2,mu);  %negative sign becaue this is for k>0

N1 = N11*Pzsf(1) + N12*Pzsf(2);
N2 = N21*Pzsf(1) + N22*Pzsf(2);
N3 = N31*Pzsf(1) + N32*Pzsf(2);


    s=R2(2);
    Den = a2*s*(s-R2(3));
    Num = -( N1 + N2*s + N3*s^2);
    term1 = Num*(exp(s*t) -1)/Den;
     
    s=R2(3);
    Den = a2*s*(s-R2(2));
    Num = -( N1 + N2*s + N3*s^2);
    term2 = Num*(exp(s*t) -1)/Den;
    
    

UT_n1= -(term1 + term2);
 

   
   %order = 1
   F4x4=[F1_p1;F2_p1;F3_p1;0];
    Pzsf=  Pzs4(3:4,:)*F4x4;

    Nu1 = Nu11*Pzsf(1) + Nu21*Pzsf(2);
    Nu2 = Nu12*Pzsf(1) + Nu22*Pzsf(2);
        
    s=R(2);
    Den = a*s*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term11 = Num1*(exp(s*t) -1)/Den;
    term21 = Num2*(exp(s*t) -1)/Den;
    
    s=R(3);
    Den = a*s*(s-R(2))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term12 = Num1*(exp(s*t) -1)/Den;
    term22 = Num2*(exp(s*t) -1)/Den;
  
    s=R(4);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term13 = Num1*(exp(s*t) -1)/Den;
    term23 = Num2*(exp(s*t) -1)/Den;
  
    s=R(5);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term14 = Num1*(exp(s*t) -1)/Den;
    term24 = Num2*(exp(s*t) -1)/Den;
  
    s=R(6);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term15 = Num1*(exp(s*t) -1)/Den;
    term25 = Num2*(exp(s*t) -1)/Den;
  
    s=R(7);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term16 = Num1*(exp(s*t) -1)/Den;
    term26 = Num2*(exp(s*t) -1)/Den;
  
 
    s=R(8);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term17 = Num1*(exp(s*t) -1)/Den;
    term27 = Num2*(exp(s*t) -1)/Den;
 
   u1 = term11 + term12 + term13 + term14+ term15+ term16+ term17;
   u2 = term21 + term22 + term23 + term24+ term25+ term26+ term27;
	   
   US_p1 = u1;
   UR_p1 = -u2;
   
   
%2x2 system
F2x2=[f1_p1;f2_p1];
Pzsf=Pzs2*F2x2;
%[N1,N2,N3,R2,a2] = roots_2visc_antiplane(Pzsf,B1,B2,k(j),H1-H2,Ph2,mu);

N1 = N11*Pzsf(1) + N12*Pzsf(2);
N2 = N21*Pzsf(1) + N22*Pzsf(2);
N3 = N31*Pzsf(1) + N32*Pzsf(2);

    s=R2(2);
    Den = a2*s*(s-R2(3));
    Num = -( N1 + N2*s + N3*s^2);
    term1 = Num*(exp(s*t) -1)/Den;
     
    s=R2(3);
    Den = a2*s*(s-R2(2));
    Num = -( N1 + N2*s + N3*s^2);
    term2 = Num*(exp(s*t) -1)/Den;
    

UT_p1= -(term1 + term2);



   %order = -2
   F4x4=[F1_n2;F2_n2;F3_n2;0];
    Pzsf=  Pzs4(3:4,:)*F4x4;
	
    Nu1 = Nu11*Pzsf(1) + Nu21*Pzsf(2);
    Nu2 = Nu12*Pzsf(1) + Nu22*Pzsf(2);
    
    s=R(2);
    Den = a*s*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term11 = Num1*(exp(s*t) -1)/Den;
    term21 = Num2*(exp(s*t) -1)/Den;
    
    s=R(3);
    Den = a*s*(s-R(2))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term12 = Num1*(exp(s*t) -1)/Den;
    term22 = Num2*(exp(s*t) -1)/Den;
  
    s=R(4);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term13 = Num1*(exp(s*t) -1)/Den;
    term23 = Num2*(exp(s*t) -1)/Den;
  
    s=R(5);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term14 = Num1*(exp(s*t) -1)/Den;
    term24 = Num2*(exp(s*t) -1)/Den;
  
    s=R(6);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term15 = Num1*(exp(s*t) -1)/Den;
    term25 = Num2*(exp(s*t) -1)/Den;
  
    s=R(7);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term16 = Num1*(exp(s*t) -1)/Den;
    term26 = Num2*(exp(s*t) -1)/Den;
  
 
    s=R(8);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term17 = Num1*(exp(s*t) -1)/Den;
    term27 = Num2*(exp(s*t) -1)/Den;
 
   u1 = term11 + term12 + term13 + term14+ term15+ term16+ term17;
   u2 = term21 + term22 + term23 + term24+ term25+ term26+ term27;
	   
   US_n2 = u1;
   UR_n2 = -u2;
   
   
%2x2 system
F2x2=[f1_n2;f2_n2];
Pzsf=Pzs2*F2x2;
%[N1,N2,N3,R2,a2] = roots_2visc_antiplane(Pzsf,B1,B2,k(j),H1-H2,Ph2,mu);
 
N1 = N11*Pzsf(1) + N12*Pzsf(2);
N2 = N21*Pzsf(1) + N22*Pzsf(2);
N3 = N31*Pzsf(1) + N32*Pzsf(2);

    s=R2(2);
    Den = a2*s*(s-R2(3));
    Num = -( N1 + N2*s + N3*s^2);
    term1 = Num*(exp(s*t) -1)/Den;
     
    s=R2(3);
    Den = a2*s*(s-R2(2));
    Num = -( N1 + N2*s + N3*s^2);
    term2 = Num*(exp(s*t) -1)/Den;
    
      

UT_n2= -(term1 + term2);

    
   %order = 2
   F4x4=[F1_p2;F2_p2;F3_p2;0];
    Pzsf=  Pzs4(3:4,:)*F4x4;
	
    Nu1 = Nu11*Pzsf(1) + Nu21*Pzsf(2);
    Nu2 = Nu12*Pzsf(1) + Nu22*Pzsf(2);
    
     s=R(2);
    Den = a*s*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term11 = Num1*(exp(s*t) -1)/Den;
    term21 = Num2*(exp(s*t) -1)/Den;
    
    s=R(3);
    Den = a*s*(s-R(2))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term12 = Num1*(exp(s*t) -1)/Den;
    term22 = Num2*(exp(s*t) -1)/Den;
  
    s=R(4);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(5))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term13 = Num1*(exp(s*t) -1)/Den;
    term23 = Num2*(exp(s*t) -1)/Den;
  
    s=R(5);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(6))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term14 = Num1*(exp(s*t) -1)/Den;
    term24 = Num2*(exp(s*t) -1)/Den;
  
    s=R(6);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(7))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term15 = Num1*(exp(s*t) -1)/Den;
    term25 = Num2*(exp(s*t) -1)/Den;
  
    s=R(7);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(8));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term16 = Num1*(exp(s*t) -1)/Den;
    term26 = Num2*(exp(s*t) -1)/Den;
  
 
    s=R(8);
    Den = a*s*(s-R(2))*(s-R(3))*(s-R(4))*(s-R(5))*(s-R(6))*(s-R(7));
    Num1 = -( Nu1(1) + Nu1(2)*s + Nu1(3)*s^2 + Nu1(4)*s^3 + Nu1(5)*s^4+ Nu1(6)*s^5+ Nu1(7)*s^6+ Nu1(8)*s^7 );
    Num2 = -( Nu2(1) + Nu2(2)*s + Nu2(3)*s^2 + Nu2(4)*s^3 + Nu2(5)*s^4+ Nu2(6)*s^5+ Nu2(7)*s^6+ Nu2(8)*s^7 );
    term17 = Num1*(exp(s*t) -1)/Den;
    term27 = Num2*(exp(s*t) -1)/Den;
 
   u1 = term11 + term12 + term13 + term14+ term15+ term16+ term17;
   u2 = term21 + term22 + term23 + term24+ term25+ term26+ term27;
	   
   US_p2 = u1;
   UR_p2 = -u2;
  
%2x2 system
F2x2=[f1_p2;f2_p2];
Pzsf=Pzs2*F2x2;
%[N1,N2,N3,R2,a2] = roots_2visc_antiplane(Pzsf,B1,B2,k(j),H1-H2,Ph2,mu);
N1 = N11*Pzsf(1) + N12*Pzsf(2);
N2 = N21*Pzsf(1) + N22*Pzsf(2);
N3 = N31*Pzsf(1) + N32*Pzsf(2);
    
    s=R2(2);
    Den = a2*s*(s-R2(3));
    Num = -( N1 + N2*s + N3*s^2);
    term1 = Num*(exp(s*t) -1)/Den;
     
    s=R2(3);
    Den = a2*s*(s-R2(2));
    Num = -( N1 + N2*s + N3*s^2);
    term2 = Num*(exp(s*t) -1)/Den;
    

UT_p2= -(term1 + term2);


function [N1,N2,N3,R,D3] = roots_2visc_antiplane(PzsF,B1,B2,k,d1,P0,u)



[N1,N2,N3,D1,D2,D3] = antiplane_2visc_terms(PzsF,B1,B2,k,d1,P0,u);

R=roots([D3,D2,D1,0]);




function [N1,N2,R,D8] = roots_2visc(PzsF,B1,B2,K,k,d1,P0,u)


[D1,D2,D3,D4,D5,D6,D7,D8] = Denom_2visc(B1,B2,K,k,d1,P0,u);

[N1_1,N1_2,N1_3,N1_4,N1_5,N1_6,N1_7,N1_8] = Num1_2visc(PzsF,B1,B2,K,k,d1,P0,u);
N1=[N1_1,N1_2,N1_3,N1_4,N1_5,N1_6,N1_7,N1_8];

[N2_1,N2_2,N2_3,N2_4,N2_5,N2_6,N2_7,N2_8] = Num2_2visc(PzsF,B1,B2,K,k,d1,P0,u);
N2=[N2_1,N2_2,N2_3,N2_4,N2_5,N2_6,N2_7,N2_8];

R=roots([D8,D7,D6,D5,D4,D3,D2,D1,0]);

function [N1,N2,N3,N4,N5,N6,N7,N8] = Num1_2visc(PzsF,B1,B2,K,k,d1,P0,u)

P011=P0(1,1);P012=P0(1,2);P013=P0(1,3);P014=P0(1,4);
P021=P0(2,1);P022=P0(2,2);P023=P0(2,3);P024=P0(2,4);
P031=P0(3,1);P032=P0(3,2);P033=P0(3,3);P034=P0(3,4);
P041=P0(4,1);P042=P0(4,2);P043=P0(4,3);P044=P0(4,4);


C1=cosh(k*d1);S1=sinh(k*d1);

Pf1=PzsF(1);
Pf2=PzsF(2);



N1=64*B1^4*B2*K^3*(P012*P041*Pf1 - P011*P042*Pf1 - P012*P031*Pf2 + P011*P032*Pf2)*(-2*B1*B2*C1*S1 + B2^2*(C1^2*(1 + d1^2*k^2) - d1^2*k^2*S1^2) + B1^2*((-C1^2)*d1^2*k^2 + (1 + d1^2*k^2)*S1^2));

N2=-64*B1^3*K^2*(B1^3*(P012*P041*Pf1 - P011*P042*Pf1 - P012*P031*Pf2 + P011*P032*Pf2)*(C1^2*d1^2*k^2 - (1 + d1^2*k^2)*S1^2) + ...
   B1*B2^2*(C1^2*((2 + K)*P011*(P042*Pf1 - P032*Pf2) + d1^2*k^2*(2 + K)*P011*(P042*Pf1 - P032*Pf2) + k*K*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2) + ...
       P012*((-(1 + d1^2*k^2))*(2 + K)*P041*Pf1 + (2 + K)*P031*Pf2 + d1^2*k^2*(2 + K)*P031*Pf2 + k*K*(P043*Pf1 - P033*Pf2))) + C1*(7 + 3*K)*(P012*P041*Pf1 - P011*P042*Pf1 - P012*P031*Pf2 + P011*P032*Pf2)*S1 + ...
     k*(d1^2*k*(2 + K)*(P012*P041*Pf1 - P011*P042*Pf1 - P012*P031*Pf2 + P011*P032*Pf2) + K*(P014*P041*Pf1 - P013*P042*Pf1 + P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 - P012*P033*Pf2 + P011*P034*Pf2))*S1^2) + ...
   B1^2*B2*(C1^2*d1*k^2*(K*((-P014)*P041*Pf1 - P013*P042*Pf1 + P012*P043*Pf1 + P011*P044*Pf1 + P014*P031*Pf2 + P013*P032*Pf2 - P012*P033*Pf2 - P011*P034*Pf2) + ...
       d1*((-(3 + 2*K))*P011*(P042*Pf1 - P032*Pf2) + k*K*((-P013)*P041*Pf1 + P014*P042*Pf1 + P011*P043*Pf1 + P013*P031*Pf2 - P014*P032*Pf2 - P011*P033*Pf2) + ...
         P012*((3 + 2*K)*P041*Pf1 - (3 + 2*K)*P031*Pf2 + k*K*((-P044)*Pf1 + P034*Pf2)))) + ...
     C1*((-(3 + K))*P011*(P042*Pf1 - P032*Pf2) + k*K*((-P014)*P041*Pf1 + P013*P042*Pf1 + P011*P044*Pf1 + P014*P031*Pf2 - P013*P032*Pf2 - P011*P034*Pf2) + ...
       P012*((3 + K)*P041*Pf1 - (3 + K)*P031*Pf2 + k*K*((-P043)*Pf1 + P033*Pf2)))*S1 + ...
     (2*(2 + K)*P011*(P042*Pf1 - P032*Pf2) + d1*k^2*K*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + ...
       d1^2*k^2*((3 + 2*K)*P011*(P042*Pf1 - P032*Pf2) + k*K*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2)) + ...
       P012*((-(2*(2 + K) + d1^2*k^2*(3 + 2*K)))*P041*Pf1 + 2*(2 + K)*P031*Pf2 + d1*k^2*K*((-P043)*Pf1 + P033*Pf2) + d1^2*k^2*((3 + 2*K)*P031*Pf2 + k*K*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   B2^3*(C1^2*((3 + K)*P011*(P042*Pf1 - P032*Pf2) + d1*k^2*K*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + ...
       d1^2*k^2*((2 + K)*P011*(P042*Pf1 - P032*Pf2) + k*K*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2)) + ...
       P012*((-(3 + K + d1^2*k^2*(2 + K)))*P041*Pf1 + (3 + K)*P031*Pf2 + d1*k^2*K*((-P043)*Pf1 + P033*Pf2) + d1^2*k^2*((2 + K)*P031*Pf2 + k*K*(P044*Pf1 - P034*Pf2)))) + ...
     C1*k*K*((-P014)*P041*Pf1 + P013*P042*Pf1 - P012*P043*Pf1 + P011*P044*Pf1 + P014*P031*Pf2 - P013*P032*Pf2 + P012*P033*Pf2 - P011*P034*Pf2)*S1 + ...
     d1*k^2*(K*((-P014)*P041*Pf1 - P013*P042*Pf1 + P012*P043*Pf1 + P011*P044*Pf1 + P014*P031*Pf2 + P013*P032*Pf2 - P012*P033*Pf2 - P011*P034*Pf2) + ...
       d1*((-(2 + K))*P011*(P042*Pf1 - P032*Pf2) + k*K*((-P013)*P041*Pf1 + P014*P042*Pf1 + P011*P043*Pf1 + P013*P031*Pf2 - P014*P032*Pf2 - P011*P033*Pf2) + ...
         P012*((2 + K)*P041*Pf1 - (2 + K)*P031*Pf2 + k*K*((-P044)*Pf1 + P034*Pf2))))*S1^2));
         
N3=16*B1^2*K*(B1^2*B2*(C1^2*(2*d1*k^2*K*(7 + 3*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P012*P033*Pf2 + P011*P034*Pf2) + ...
       d1^2*k^2*((12 + 14*K + 5*K^2)*P011*(P042*Pf1 - P032*Pf2) + 6*k*K*(2 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
         4*k^2*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*((-(12 + 14*K + 5*K^2))*P041*Pf1 + (12 + 14*K + 5*K^2)*P031*Pf2 + 6*k*K*(2 + K)*(P044*Pf1 - P034*Pf2))) + ...
       K*((-(8 + K))*P011*(P042*Pf1 - P032*Pf2) + 4*k^2*K*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
         P012*((8 + K)*P041*Pf1 - (8 + K)*P031*Pf2 - 2*k*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) - 2*k*(P014*((3 + K)*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 - K*P031*Pf2 + P032*Pf2) + ...
           P013*(P041*Pf1 - (3 + K)*P042*Pf1 + (-P031 + (3 + K)*P032)*Pf2) + P011*((-P043)*Pf1 - (3 + K)*P044*Pf1 + (P033 + (3 + K)*P034)*Pf2)))) - ...
     2*C1*(7 + 3*K)*((-(3 + K))*P011*(P042*Pf1 - P032*Pf2) + k*K*((-P014)*P041*Pf1 + P013*P042*Pf1 + P011*P044*Pf1 + P014*P031*Pf2 - P013*P032*Pf2 - P011*P034*Pf2) + ...
       P012*((3 + K)*P041*Pf1 - (3 + K)*P031*Pf2 + k*K*((-P043)*Pf1 + P033*Pf2)))*S1 + (-2*d1*k^2*K*(7 + 3*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) - ...
       2*((9 + 16*K + 3*K^2)*P011*(P042*Pf1 - P032*Pf2) + k*K*(3 + K)*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2)) + ...
       d1^2*k^2*((-(12 + 14*K + 5*K^2))*P011*(P042*Pf1 - P032*Pf2) - 6*k*K*(2 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
         4*k^2*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*((18 + 32*K + 6*K^2 + d1^2*k^2*(12 + 14*K + 5*K^2))*P041*Pf1 - 2*(9 + 16*K + 3*K^2)*P031*Pf2 - 2*k*K*(3 + K)*(P043*Pf1 - P033*Pf2) - ...
         6*d1^2*k^3*K*(2 + K)*(P044*Pf1 - P034*Pf2) - d1*k^2*(12*d1*P031*Pf2 + K^2*(-6*P043*Pf1 + 5*d1*P031*Pf2 + 6*P033*Pf2) - 14*K*(P043*Pf1 - (d1*P031 + P033)*Pf2))))*S1^2) + ...
   2*B1*B2^2*(2*C1^2*((-d1)*k^2*K*(2 + K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) - ...
       d1^2*k^2*(2 + K)*((2 + K)*P011*(P042*Pf1 - P032*Pf2) + k*K*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2)) - ...
       (3 + K)*((2 + K)*P011*(P042*Pf1 - P032*Pf2) + k*K*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2)) + ...
       P012*((2 + K)*(3 + K + d1^2*k^2*(2 + K))*P041*Pf1 - (6 + 5*K + K^2)*P031*Pf2 - k*K*(3 + K)*(P043*Pf1 - P033*Pf2) - d1^2*k^3*K*(2 + K)*(P044*Pf1 - P034*Pf2) - ...
         d1*k^2*(2 + K)*(2*d1*P031*Pf2 + K*((-P043)*Pf1 + (d1*P031 + P033)*Pf2)))) + C1*(3*(4 + 7*K + K^2)*P011*(P042*Pf1 - P032*Pf2) - 4*k^2*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
       P012*(-3*(4 + 7*K + K^2)*P041*Pf1 + 3*(4 + 7*K + K^2)*P031*Pf2 + 2*k*K*((2 + K)*P043*Pf1 + P044*Pf1 - ((2 + K)*P033 + P034)*Pf2)) - ...
       2*k*K*(P014*((-(2 + K))*P041*Pf1 + P042*Pf1 + ((2 + K)*P031 - P032)*Pf2) + P013*((-P041)*Pf1 + (2 + K)*P042*Pf1 + (P031 - (2 + K)*P032)*Pf2) + P011*(P043*Pf1 + (2 + K)*P044*Pf1 - (P033 + (2 + K)*P034)*Pf2)))*S1 + ...
     2*k*((-K)*(3 + K)*(P014*P041*Pf1 - P013*P042*Pf1 + P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 - P012*P033*Pf2 + P011*P034*Pf2) + ...
       d1*k*K*(2 + K)*(P014*P041*Pf1 + P013*P042*Pf1 - P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P012*P033*Pf2 + P011*P034*Pf2) + ...
       d1^2*k*(2 + K)*((2 + K)*P011*(P042*Pf1 - P032*Pf2) + k*K*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
         P012*((-(2 + K))*P041*Pf1 + (2 + K)*P031*Pf2 + k*K*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   2*B1^3*(C1^2*d1*k^2*(2*K*(P014*P041*Pf1 + P013*P042*Pf1 - P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P012*P033*Pf2 + P011*P034*Pf2) + ...
       d1*((4 + 5*K)*P011*(P042*Pf1 - P032*Pf2) + 2*k*K*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
         P012*((-(4 + 5*K))*P041*Pf1 + (4 + 5*K)*P031*Pf2 + 2*k*K*(P044*Pf1 - P034*Pf2)))) + C1*K*(3*P011*(P042*Pf1 - P032*Pf2) + P012*(-3*P041*Pf1 + 2*k*P043*Pf1 + 3*P031*Pf2 - 2*k*P033*Pf2) + ...
       2*k*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2))*S1 + ...
     (-4*(2 + K)*P011*(P042*Pf1 - P032*Pf2) - 2*d1*k^2*K*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + ...
       d1^2*k^2*((-(4 + 5*K))*P011*(P042*Pf1 - P032*Pf2) - 2*k*K*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2)) + ...
       P012*((4*(2 + K) + d1^2*k^2*(4 + 5*K))*P041*Pf1 - 4*(2 + K)*P031*Pf2 + 2*d1*k^2*K*(P043*Pf1 - P033*Pf2) - d1^2*k^2*((4 + 5*K)*P031*Pf2 + 2*k*K*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   B2^3*(C1^2*((-(9 + 12*K + K^2))*P011*(P042*Pf1 - P032*Pf2) - 2*d1*k^2*K*(5 + K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + ...
       d1^2*k^2*((-(4 + 8*K + K^2))*P011*(P042*Pf1 - P032*Pf2) - 2*k*K*(4 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
         4*k^2*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*((9 + 12*K + K^2 + d1^2*k^2*(4 + 8*K + K^2))*P041*Pf1 - (9 + 12*K + K^2)*P031*Pf2 + 2*d1*k^2*K*(5 + K)*(P043*Pf1 - P033*Pf2) - ...
         d1^2*k^2*((4 + 8*K + K^2)*P031*Pf2 + 2*k*K*(4 + K)*(P044*Pf1 - P034*Pf2)))) + 2*C1*k*K*(5 + K)*(P014*P041*Pf1 - P013*P042*Pf1 + P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 - P012*P033*Pf2 + ...
       P011*P034*Pf2)*S1 + (P011*(P042*Pf1 - P032*Pf2) - 2*k*K*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       2*d1^2*k^3*K*(4 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + 4*d1^2*k^4*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
       k^2*(d1^2*(4 + 8*K + K^2)*P011*(P042*Pf1 - P032*Pf2) + 2*d1*K*(5 + K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + ...
         4*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*((-(1 + d1^2*k^2*(4 + 8*K + K^2)))*P041*Pf1 - 2*k*K*P044*Pf1 + P031*Pf2 + 2*k*K*P034*Pf2 - 2*d1*k^2*K*(5 + K)*(P043*Pf1 - P033*Pf2) + ...
         d1^2*k^2*((4 + 8*K + K^2)*P031*Pf2 + 2*k*K*(4 + K)*(P044*Pf1 - P034*Pf2))))*S1^2));
         
         
  N4=16*B1*(B1*B2^2*(C1^2*(-2*d1*k^2*K*(10 + 7*K + K^2)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) - ...
       (9 + 12*K + K^2)*((2 + K)*P011*(P042*Pf1 - P032*Pf2) + k*K*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2)) + ...
       d1^2*k^2*(2 + K)*((-(4 + 8*K + K^2))*P011*(P042*Pf1 - P032*Pf2) - 2*k*K*(4 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
         4*k^2*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*((2 + K)*(9 + 12*K + K^2 + d1^2*k^2*(4 + 8*K + K^2))*P041*Pf1 - (18 + 33*K + 14*K^2 + K^3)*P031*Pf2 - ...
         k*K*(9 + 12*K + K^2)*(P043*Pf1 - P033*Pf2) - 2*d1^2*k^3*K*(8 + 6*K + K^2)*(P044*Pf1 - P034*Pf2) - d1*k^2*(2 + K)*(4*d1*P031*Pf2 + K^2*(-2*P043*Pf1 + d1*P031*Pf2 + 2*P033*Pf2) + ...
           2*K*(-5*P043*Pf1 + 4*d1*P031*Pf2 + 5*P033*Pf2)))) + C1*K*((36 + 21*K + K^2)*P011*(P042*Pf1 - P032*Pf2) - 4*k^2*K*(5 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
       P012*((-(36 + 21*K + K^2))*P041*Pf1 + (36 + 21*K + K^2)*P031*Pf2 + 2*k*((10 + 7*K + K^2)*P043*Pf1 + (3 + 2*K)*P044*Pf1 - ((10 + 7*K + K^2)*P033 + (3 + 2*K)*P034)*Pf2)) + ...
       2*k*(P014*((10 + 7*K + K^2)*P041*Pf1 - (3 + 2*K)*P042*Pf1 - ((10 + 7*K + K^2)*P031 - (3 + 2*K)*P032)*Pf2) + P013*((3 + 2*K)*P041*Pf1 - (10 + 7*K + K^2)*P042*Pf1 + ((-(3 + 2*K))*P031 + (10 + 7*K + K^2)*P032)*Pf2) + ...
         P011*((-(3 + 2*K))*P043*Pf1 - (10 + 7*K + K^2)*P044*Pf1 + ((3 + 2*K)*P033 + (10 + 7*K + K^2)*P034)*Pf2)))*S1 + ...
     ((2 + K)*P011*(P042*Pf1 - P032*Pf2) + 2*d1^2*k^3*K*(8 + 6*K + K^2)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       4*d1^2*k^4*K^2*(2 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + k^2*(2 + K)*(d1^2*(4 + 8*K + K^2)*P011*(P042*Pf1 - P032*Pf2) + ...
         2*d1*K*(5 + K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + 4*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + ...
       k*K*(P014*((-(9 + 12*K + K^2))*P041*Pf1 + 2*(2 + K)*P042*Pf1 + ((9 + 12*K + K^2)*P031 - 2*(2 + K)*P032)*Pf2) + P013*(-2*(2 + K)*P041*Pf1 + (9 + 12*K + K^2)*P042*Pf1 + (2*(2 + K)*P031 - (9 + 12*K + K^2)*P032)*Pf2) + ...
         P011*(2*(2 + K)*P043*Pf1 + (9 + 12*K + K^2)*P044*Pf1 - (2*(2 + K)*P033 + (9 + 12*K + K^2)*P034)*Pf2)) + P012*((-(2 + K))*(1 + d1^2*k^2*(4 + 8*K + K^2))*P041*Pf1 + (2 + K)*P031*Pf2 + ...
         2*d1^2*k^3*K*(8 + 6*K + K^2)*(P044*Pf1 - P034*Pf2) + k*K*((-(9 + 12*K + K^2))*P043*Pf1 - 2*(2 + K)*P044*Pf1 + ((9 + 12*K + K^2)*P033 + 2*(2 + K)*P034)*Pf2) + ...
         d1*k^2*(2 + K)*(4*d1*P031*Pf2 + K^2*(-2*P043*Pf1 + d1*P031*Pf2 + 2*P033*Pf2) + 2*K*(-5*P043*Pf1 + 4*d1*P031*Pf2 + 5*P033*Pf2))))*S1^2) + ...
   B1^2*B2*(C1^2*(d1*k^2*K*(16 + 11*K + 2*K^2)*(P014*P041*Pf1 + P013*P042*Pf1 - P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P012*P033*Pf2 + P011*P034*Pf2) + ...
       d1^2*k^2*((4 + 4*K + 5*K^2 + K^3)*P011*(P042*Pf1 - P032*Pf2) + 2*k*K*(6 + 4*K + K^2)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
         4*k^2*K^2*(3 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*((-(4 + 4*K + 5*K^2 + K^3))*P041*Pf1 + (4 + 4*K + 5*K^2 + K^3)*P031*Pf2 + 2*k*K*(6 + 4*K + K^2)*(P044*Pf1 - P034*Pf2))) + ...
       K*(3 + K)*((-(8 + K))*P011*(P042*Pf1 - P032*Pf2) + 4*k^2*K*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
         P012*((8 + K)*P041*Pf1 - (8 + K)*P031*Pf2 - 2*k*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) - 2*k*(P014*((3 + K)*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 - K*P031*Pf2 + P032*Pf2) + ...
           P013*(P041*Pf1 - (3 + K)*P042*Pf1 + (-P031 + (3 + K)*P032)*Pf2) + P011*((-P043)*Pf1 - (3 + K)*P044*Pf1 + (P033 + (3 + K)*P034)*Pf2)))) + ...
     C1*(3*(12 + 25*K + 10*K^2 + K^3)*P011*(P042*Pf1 - P032*Pf2) - 4*k^2*K^2*(3 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
       P012*(-3*(12 + 25*K + 10*K^2 + K^3)*P041*Pf1 + 3*(12 + 25*K + 10*K^2 + K^3)*P031*Pf2 + k*K*((14 + 29*K + 4*K^2)*P043*Pf1 + 2*(3 + K)*P044*Pf1 - ((14 + 29*K + 4*K^2)*P033 + 2*(3 + K)*P034)*Pf2)) + ...
       k*K*(P014*((14 + 29*K + 4*K^2)*P041*Pf1 - 2*(3 + K)*P042*Pf1 - ((14 + 29*K + 4*K^2)*P031 - 2*(3 + K)*P032)*Pf2) + P013*(2*(3 + K)*P041*Pf1 - (14 + 29*K + 4*K^2)*P042*Pf1 + ...
           (-2*(3 + K)*P031 + (14 + 29*K + 4*K^2)*P032)*Pf2) + P011*(-2*(3 + K)*P043*Pf1 - (14 + 29*K + 4*K^2)*P044*Pf1 + (2*(3 + K)*P033 + (14 + 29*K + 4*K^2)*P034)*Pf2)))*S1 + ...
     ((-(4 + 35*K + 24*K^2 + 2*K^3))*P011*(P042*Pf1 - P032*Pf2) - 2*d1^2*k^3*K*(6 + 4*K + K^2)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
       4*d1^2*k^4*K^2*(3 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + d1*k^2*(4*d1*P011*((-P042)*Pf1 + P032*Pf2) + ...
         K^2*(-11*P014*P041*Pf1 - 5*d1*P011*P042*Pf1 - 11*P013*P042*Pf1 + 11*P011*P044*Pf1 + 11*P014*P031*Pf2 + 5*d1*P011*P032*Pf2 + 11*P013*P032*Pf2 - 11*P011*P034*Pf2) + ...
         K^3*(-2*P014*P041*Pf1 - d1*P011*P042*Pf1 - 2*P013*P042*Pf1 + 2*P011*P044*Pf1 + 2*P014*P031*Pf2 + d1*P011*P032*Pf2 + 2*P013*P032*Pf2 - 2*P011*P034*Pf2) - ...
         4*K*(4*P014*P041*Pf1 + d1*P011*P042*Pf1 + 4*P013*P042*Pf1 - 4*P011*P044*Pf1 - 4*P014*P031*Pf2 - d1*P011*P032*Pf2 - 4*P013*P032*Pf2 + 4*P011*P034*Pf2)) + ...
       k*K*(P014*(-2*(3 + K)^2*P041*Pf1 + (-2 + K)*P042*Pf1 + (2*(3 + K)^2*P031 - (-2 + K)*P032)*Pf2) + P013*((-(-2 + K))*P041*Pf1 + 2*(3 + K)^2*P042*Pf1 + ((-2 + K)*P031 - 2*(3 + K)^2*P032)*Pf2) + ...
         P011*((-2 + K)*P043*Pf1 + 2*(3 + K)^2*P044*Pf1 - ((-2 + K)*P033 + 2*(3 + K)^2*P034)*Pf2)) + P012*((4 + 35*K + 24*K^2 + 2*K^3 + d1^2*k^2*(4 + 4*K + 5*K^2 + K^3))*P041*Pf1 - (4 + 35*K + 24*K^2 + 2*K^3)*P031*Pf2 - ...
         2*d1^2*k^3*K*(6 + 4*K + K^2)*(P044*Pf1 - P034*Pf2) - k*K*(2*(3 + K)^2*P043*Pf1 + (-2 + K)*P044*Pf1 - (2*(3 + K)^2*P033 + (-2 + K)*P034)*Pf2) - ...
         d1*k^2*(4*d1*P031*Pf2 + K^3*(-2*P043*Pf1 + d1*P031*Pf2 + 2*P033*Pf2) + 4*K*(-4*P043*Pf1 + d1*P031*Pf2 + 4*P033*Pf2) + K^2*(-11*P043*Pf1 + 5*d1*P031*Pf2 + 11*P033*Pf2))))*S1^2) + ...
   B2^3*K*(C1^2*(-3*(3 + K)*P011*(P042*Pf1 - P032*Pf2) - d1*k^2*(6 + 5*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + ...
       2*d1^2*k^2*((-(2 + K))*P011*(P042*Pf1 - P032*Pf2) - 2*k*(1 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
         4*k^2*K*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*((2*d1^2*k^2*(2 + K) + 3*(3 + K))*P041*Pf1 - 3*(3 + K)*P031*Pf2 + d1*k^2*(6 + 5*K)*(P043*Pf1 - P033*Pf2) - ...
         2*d1^2*k^2*((2 + K)*P031*Pf2 + 2*k*(1 + K)*(P044*Pf1 - P034*Pf2)))) + C1*k*(6 + 5*K)*(P014*P041*Pf1 - P013*P042*Pf1 + P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 - P012*P033*Pf2 + P011*P034*Pf2)*S1 + ...
     (P011*(P042*Pf1 - P032*Pf2) + 4*d1^2*k^3*(1 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
       k*(2 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + 8*d1^2*k^4*K*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
       k^2*(2*d1^2*(2 + K)*P011*(P042*Pf1 - P032*Pf2) + d1*(6 + 5*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + ...
         8*K*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*((-(1 + 2*d1^2*k^2*(2 + K)))*P041*Pf1 - 2*k*P044*Pf1 - k*K*P044*Pf1 + P031*Pf2 + 2*k*P034*Pf2 + k*K*P034*Pf2 - ...
         d1*k^2*(6 + 5*K)*(P043*Pf1 - P033*Pf2) + 2*d1^2*k^2*((2 + K)*P031*Pf2 + 2*k*(1 + K)*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   B1^3*(C1^2*(2*d1*k^2*K*(5 + 4*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P012*P033*Pf2 + P011*P034*Pf2) + ...
       d1^2*k^2*((4 + 20*K + 7*K^2)*P011*(P042*Pf1 - P032*Pf2) + 8*k*K*(1 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
         4*k^2*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*((-(4 + 20*K + 7*K^2))*P041*Pf1 + (4 + 20*K + 7*K^2)*P031*Pf2 + 8*k*K*(1 + K)*(P044*Pf1 - P034*Pf2))) + ...
       K^2*(-2*P011*P042*Pf1 + 2*P011*P032*Pf2 + 4*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*(2*P041*Pf1 - 2*P031*Pf2 + k*(-3*P043*Pf1 - P044*Pf1 + 3*P033*Pf2 + P034*Pf2)) + ...
         k*(P013*((-P041)*Pf1 + 3*P042*Pf1 + (P031 - 3*P032)*Pf2) + P014*(-3*P041*Pf1 + P042*Pf1 + 3*P031*Pf2 - P032*Pf2) + P011*(P043*Pf1 + 3*P044*Pf1 - (P033 + 3*P034)*Pf2)))) + ...
     C1*K*(7 + 3*K)*(3*P011*(P042*Pf1 - P032*Pf2) + P012*(-3*P041*Pf1 + 2*k*P043*Pf1 + 3*P031*Pf2 - 2*k*P033*Pf2) + 2*k*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2))*S1 + ...
     ((-(16 + 33*K + 6*K^2))*P011*(P042*Pf1 - P032*Pf2) - 8*d1^2*k^3*K*(1 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
       4*d1^2*k^4*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + d1*k^2*(4*d1*P011*((-P042)*Pf1 + P032*Pf2) + K^2*(-8*P014*P041*Pf1 - 7*d1*P011*P042*Pf1 - 8*P013*P042*Pf1 + 8*P011*P044*Pf1 + ...
           8*P014*P031*Pf2 + 7*d1*P011*P032*Pf2 + 8*P013*P032*Pf2 - 8*P011*P034*Pf2) - 10*K*(P014*P041*Pf1 + 2*d1*P011*P042*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - 2*d1*P011*P032*Pf2 - P013*P032*Pf2 + ...
           P011*P034*Pf2)) + k*K*(2*(P014*P042*Pf1 + P011*P043*Pf1 - P014*P032*Pf2 - P011*P033*Pf2) + P013*((-2 + K)*P041*Pf1 + 2*P031*Pf2 + K*(3*P042*Pf1 - (P031 + 3*P032)*Pf2)) + ...
         K*(P014*(-3*P041*Pf1 - P042*Pf1 + 3*P031*Pf2 + P032*Pf2) + P011*((-P043)*Pf1 + 3*P044*Pf1 + P033*Pf2 - 3*P034*Pf2))) + P012*((16 + 33*K + 6*K^2 + d1^2*k^2*(4 + 20*K + 7*K^2))*P041*Pf1 - 3*k*K^2*P043*Pf1 - ...
         2*k*K*P044*Pf1 + k*K^2*P044*Pf1 - 16*P031*Pf2 - 33*K*P031*Pf2 - 6*K^2*P031*Pf2 + 3*k*K^2*P033*Pf2 + 2*k*K*P034*Pf2 - k*K^2*P034*Pf2 + 2*d1*k^2*K*(5 + 4*K)*(P043*Pf1 - P033*Pf2) - ...
         d1^2*k^2*((4 + 20*K + 7*K^2)*P031*Pf2 + 8*k*K*(1 + K)*(P044*Pf1 - P034*Pf2))))*S1^2));
         
         
 N5=4*(B2^3*K*(C1^2*(-9*P011*P042*Pf1 + 9*P011*P032*Pf2 - 12*d1*k^2*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + ...
       P012*((9 + 4*d1^2*k^2)*P041*Pf1 - 9*P031*Pf2 + 12*d1*k^2*(P043*Pf1 - P033*Pf2) - 4*d1^2*k^2*(2*k*P044*Pf1 + P031*Pf2 - 2*k*P034*Pf2)) + ...
       4*d1^2*k^2*((-P011)*P042*Pf1 + P011*P032*Pf2 - 2*k*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
         4*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2))) + 12*C1*k*(P014*P041*Pf1 - P013*P042*Pf1 + P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 - P012*P033*Pf2 + P011*P034*Pf2)*S1 + ...
     (P011*(P042*Pf1 - P032*Pf2) - 4*k*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       8*d1^2*k^3*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + 16*d1^2*k^4*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
       P012*(-4*k*P044*Pf1 - P041*(Pf1 + 4*d1^2*k^2*Pf1) + P031*Pf2 + 4*k*P034*Pf2 - 12*d1*k^2*(P043*Pf1 - P033*Pf2) + 4*d1^2*k^2*(2*k*P044*Pf1 + P031*Pf2 - 2*k*P034*Pf2)) + ...
       4*k^2*(d1^2*P011*(P042*Pf1 - P032*Pf2) + 3*d1*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + 4*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)))*S1^2) + ...
   B1^2*B2*(C1^2*((-(72 + 105*K + 20*K^2 + K^3))*P011*(P042*Pf1 - P032*Pf2) + 4*d1^2*k^3*(4 - 2*K + K^2)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       8*d1^2*k^4*K*(6 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + 2*k^2*(d1^2*(-4 - 10*K + K^2)*P011*(P042*Pf1 - P032*Pf2) + ...
         2*d1*(6 - K + 2*K^2)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + 2*K*(9 + 12*K + K^2)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + ...
       P012*((72 + 105*K + 20*K^2 + K^3 - 2*d1^2*k^2*(-4 - 10*K + K^2))*P041*Pf1 - (72 + 105*K + 20*K^2 + K^3)*P031*Pf2 + 2*d1*k^2*(-2*(6 - K + 2*K^2)*P043*Pf1 + (d1*(-4 - 10*K + K^2)*P031 + 2*(6 - K + 2*K^2)*P033)*Pf2) + ...
         4*d1^2*k^3*(4 - 2*K + K^2)*(P044*Pf1 - P034*Pf2) - 2*k*(9 + 12*K + K^2)*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) + ...
       2*k*(9 + 12*K + K^2)*(P014*((-(3 + K))*P041*Pf1 + P042*Pf1 + ((3 + K)*P031 - P032)*Pf2) + P013*((-P041)*Pf1 + (3 + K)*P042*Pf1 + (P031 - (3 + K)*P032)*Pf2) + ...
         P011*(P043*Pf1 + (3 + K)*P044*Pf1 - (P033 + (3 + K)*P034)*Pf2))) - 2*C1*((-(108 + 99*K + 24*K^2 + K^3))*P011*(P042*Pf1 - P032*Pf2) + ...
       4*k^2*K*(15 + 8*K + K^2)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*((108 + 99*K + 24*K^2 + K^3)*P041*Pf1 - (108 + 99*K + 24*K^2 + K^3)*P031*Pf2 - ...
         2*k*((3 + 40*K + 17*K^2 + K^3)*P043*Pf1 + (9 + 9*K + 2*K^2)*P044*Pf1 - ((3 + 40*K + 17*K^2 + K^3)*P033 + (9 + 9*K + 2*K^2)*P034)*Pf2)) - ...
       2*k*(P014*((3 + 40*K + 17*K^2 + K^3)*P041*Pf1 - (9 + 9*K + 2*K^2)*P042*Pf1 - ((3 + 40*K + 17*K^2 + K^3)*P031 - (9 + 9*K + 2*K^2)*P032)*Pf2) + ...
         P013*((9 + 9*K + 2*K^2)*P041*Pf1 - (3 + 40*K + 17*K^2 + K^3)*P042*Pf1 - ((9 + 9*K + 2*K^2)*P031 - (3 + 40*K + 17*K^2 + K^3)*P032)*Pf2) + ...
         P011*((-(9 + 9*K + 2*K^2))*P043*Pf1 - (3 + 40*K + 17*K^2 + K^3)*P044*Pf1 + ((9 + 9*K + 2*K^2)*P033 + (3 + 40*K + 17*K^2 + K^3)*P034)*Pf2)))*S1 + ...
     ((-(16 + 101*K + 32*K^2 + K^3))*P011*(P042*Pf1 - P032*Pf2) - 4*d1^2*k^3*(4 - 2*K + K^2)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
       8*d1^2*k^4*K*(6 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + k^2*(-2*d1^2*(-4 - 10*K + K^2)*P011*(P042*Pf1 - P032*Pf2) - ...
         4*d1*(6 - K + 2*K^2)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + 4*K*(1 + 8*K + K^2)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + ...
       P012*((16 + 101*K + 32*K^2 + K^3 + 2*d1^2*k^2*(-4 - 10*K + K^2))*P041*Pf1 - (16 + 101*K + 32*K^2 + K^3)*P031*Pf2 - 2*d1*k^2*(-2*(6 - K + 2*K^2)*P043*Pf1 + (d1*(-4 - 10*K + K^2)*P031 + 2*(6 - K + 2*K^2)*P033)*Pf2) - ...
         4*d1^2*k^3*(4 - 2*K + K^2)*(P044*Pf1 - P034*Pf2) - 2*k*((27 + 45*K + 15*K^2 + K^3)*P043*Pf1 + (-7 + 8*K + 3*K^2)*P044*Pf1 - ((27 + 45*K + 15*K^2 + K^3)*P033 + (-7 + 8*K + 3*K^2)*P034)*Pf2)) - ...
       2*k*(P014*((27 + 45*K + 15*K^2 + K^3)*P041*Pf1 - (-7 + 8*K + 3*K^2)*P042*Pf1 - ((27 + 45*K + 15*K^2 + K^3)*P031 + (7 - 8*K - 3*K^2)*P032)*Pf2) + ...
         P013*((-7 + 8*K + 3*K^2)*P041*Pf1 - (27 + 45*K + 15*K^2 + K^3)*P042*Pf1 + ((7 - 8*K - 3*K^2)*P031 + (27 + 45*K + 15*K^2 + K^3)*P032)*Pf2) + ...
         P011*((7 - 8*K - 3*K^2)*P043*Pf1 - (27 + 45*K + 15*K^2 + K^3)*P044*Pf1 + ((-7 + 8*K + 3*K^2)*P033 + (27 + 45*K + 15*K^2 + K^3)*P034)*Pf2)))*S1^2) - ...
   2*B1^3*(C1^2*(-2*d1*k^2*(6 + 20*K + 3*K^2)*(P014*P041*Pf1 + P013*P042*Pf1 - P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P012*P033*Pf2 + P011*P034*Pf2) + ...
       d1^2*k^2*((-(20 + 28*K + 3*K^2))*P011*(P042*Pf1 - P032*Pf2) - 2*k*(4 + 16*K + 3*K^2)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
         4*k^2*K*(4 + 3*K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*((20 + 28*K + 3*K^2)*P041*Pf1 - (20 + 28*K + 3*K^2)*P031*Pf2 - 2*k*(4 + 16*K + 3*K^2)*(P044*Pf1 - P034*Pf2))) - ...
       2*K*(3 + K)*(-2*P011*P042*Pf1 + 2*P011*P032*Pf2 + 4*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*(2*P041*Pf1 - 2*P031*Pf2 + k*(-3*P043*Pf1 - P044*Pf1 + 3*P033*Pf2 + P034*Pf2)) + ...
         k*(P013*((-P041)*Pf1 + 3*P042*Pf1 + (P031 - 3*P032)*Pf2) + P014*(-3*P041*Pf1 + P042*Pf1 + 3*P031*Pf2 - P032*Pf2) + P011*(P043*Pf1 + 3*P044*Pf1 - (P033 + 3*P034)*Pf2)))) + ...
     C1*(-9*(4 + 7*K + K^2)*P011*(P042*Pf1 - P032*Pf2) + 12*k^2*K^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
       P012*(9*(4 + 7*K + K^2)*P041*Pf1 - 9*(4 + 7*K + K^2)*P031*Pf2 - 2*k*((12 + 22*K + 5*K^2)*P043*Pf1 + 3*K*P044*Pf1 - 12*P033*Pf2 - 22*K*P033*Pf2 - 5*K^2*P033*Pf2 - 3*K*P034*Pf2)) + ...
       2*k*(-12*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2) - 5*K^2*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2) + ...
         K*(P013*(-3*P041*Pf1 + 22*P042*Pf1 + 3*P031*Pf2 - 22*P032*Pf2) + P014*(-22*P041*Pf1 + 3*P042*Pf1 + 22*P031*Pf2 - 3*P032*Pf2) + P011*(3*P043*Pf1 + 22*P044*Pf1 - 3*P033*Pf2 - 22*P034*Pf2))))*S1 + ...
     ((68 + 51*K + 4*K^2)*P011*(P042*Pf1 - P032*Pf2) + 2*d1^2*k^3*(4 + 16*K + 3*K^2)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       4*d1^2*k^4*K*(4 + 3*K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + d1*k^2*(2*(6 + 20*K + 3*K^2)*P014*(P041*Pf1 - P031*Pf2) + d1*(20 + 28*K + 3*K^2)*P011*(P042*Pf1 - P032*Pf2) + ...
         2*(6 + 20*K + 3*K^2)*(P013*P042*Pf1 - P011*P044*Pf1 - P013*P032*Pf2 + P011*P034*Pf2)) - 2*k*(4*(P014*P042*Pf1 + P011*P043*Pf1 - P014*P032*Pf2 - P011*P033*Pf2) - ...
         9*K*(P014*P041*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P011*P034*Pf2) + P013*((-4 + K^2)*P041*Pf1 + 4*P031*Pf2 + 9*K*(P042*Pf1 - P032*Pf2) + K^2*(3*P042*Pf1 - (P031 + 3*P032)*Pf2)) + ...
         K^2*(P014*(-3*P041*Pf1 - P042*Pf1 + 3*P031*Pf2 + P032*Pf2) + P011*((-P043)*Pf1 + 3*P044*Pf1 + P033*Pf2 - 3*P034*Pf2))) + P012*((-(68 + 51*K + 4*K^2 + d1^2*k^2*(20 + 28*K + 3*K^2)))*P041*Pf1 + 18*k*K*P043*Pf1 + ...
         6*k*K^2*P043*Pf1 + 8*k*P044*Pf1 - 2*k*K^2*P044*Pf1 + 68*P031*Pf2 + 51*K*P031*Pf2 + 4*K^2*P031*Pf2 - 18*k*K*P033*Pf2 - 6*k*K^2*P033*Pf2 - 8*k*P034*Pf2 + 2*k*K^2*P034*Pf2 - ...
         2*d1*k^2*(6 + 20*K + 3*K^2)*(P043*Pf1 - P033*Pf2) + d1^2*k^2*((20 + 28*K + 3*K^2)*P031*Pf2 + 2*k*(4 + 16*K + 3*K^2)*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   2*B1*B2^2*(2*C1^2*((-d1)*k^2*(12 + 16*K + 5*K^2)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) - ...
       3*(3 + K)*((2 + K)*P011*(P042*Pf1 - P032*Pf2) + k*K*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2)) + ...
       2*d1^2*k^2*(2 + K)*((-(2 + K))*P011*(P042*Pf1 - P032*Pf2) - 2*k*(1 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
         4*k^2*K*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*((2 + K)*(2*d1^2*k^2*(2 + K) + 3*(3 + K))*P041*Pf1 + d1*k^2*(12 + 16*K + 5*K^2)*(P043*Pf1 - P033*Pf2) - ...
         3*(3 + K)*((2 + K)*P031*Pf2 + k*K*(P043*Pf1 - P033*Pf2)) - 2*d1^2*k^2*(2 + K)*((2 + K)*P031*Pf2 + 2*k*(1 + K)*(P044*Pf1 - P034*Pf2)))) + ...
     C1*(24*k*(P014*P041*Pf1 - P013*P042*Pf1 + P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 - P012*P033*Pf2 + P011*P034*Pf2) - ...
       4*K*(-9*P011*P042*Pf1 + 9*P011*P032*Pf2 + 6*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + k*(P013*(-3*P041*Pf1 + 8*P042*Pf1 + 3*P031*Pf2 - 8*P032*Pf2) + ...
           P014*(-8*P041*Pf1 + 3*P042*Pf1 + 8*P031*Pf2 - 3*P032*Pf2) + P011*(3*P043*Pf1 + 8*P044*Pf1 - 3*P033*Pf2 - 8*P034*Pf2)) + P012*(9*P041*Pf1 - 9*P031*Pf2 + k*(-8*P043*Pf1 - 3*P044*Pf1 + 8*P033*Pf2 + 3*P034*Pf2))) + ...
       K^2*(7*P011*(P042*Pf1 - P032*Pf2) - 20*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + 2*k*(P014*(5*P041*Pf1 - P042*Pf1 - 5*P031*Pf2 + P032*Pf2) + ...
           P013*(P041*Pf1 - 5*P042*Pf1 - P031*Pf2 + 5*P032*Pf2) + P011*((-P043)*Pf1 - 5*P044*Pf1 + P033*Pf2 + 5*P034*Pf2)) + P012*(-7*P041*Pf1 + 7*P031*Pf2 + 2*k*(5*P043*Pf1 + P044*Pf1 - (5*P033 + P034)*Pf2))))*S1 + ...
     2*((2 + K)*P011*(P042*Pf1 - P032*Pf2) + 4*d1^2*k^3*(2 + 3*K + K^2)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       8*d1^2*k^4*K*(2 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + k^2*(2 + K)*(2*d1^2*(2 + K)*P011*(P042*Pf1 - P032*Pf2) + ...
         d1*(6 + 5*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + 8*K*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + ...
       P012*((-(2 + K))*(1 + 2*d1^2*k^2*(2 + K))*P041*Pf1 - 9*k*K*P043*Pf1 - 3*k*K^2*P043*Pf1 - 4*k*P044*Pf1 - 4*k*K*P044*Pf1 - k*K^2*P044*Pf1 + 2*P031*Pf2 + K*P031*Pf2 + 9*k*K*P033*Pf2 + 3*k*K^2*P033*Pf2 + 4*k*P034*Pf2 + ...
         4*k*K*P034*Pf2 + k*K^2*P034*Pf2 - d1*k^2*(12 + 16*K + 5*K^2)*(P043*Pf1 - P033*Pf2) + 2*d1^2*k^2*(2 + K)*((2 + K)*P031*Pf2 + 2*k*(1 + K)*(P044*Pf1 - P034*Pf2))) + ...
       k*(4*(P014*P042*Pf1 + P011*P043*Pf1 - P014*P032*Pf2 - P011*P033*Pf2) + P013*((-(2 + K)^2)*P041*Pf1 + 4*P031*Pf2 + K*(9*P042*Pf1 + 4*P031*Pf2 - 9*P032*Pf2) + K^2*(3*P042*Pf1 + P031*Pf2 - 3*P032*Pf2)) + ...
         K*(P014*(-9*P041*Pf1 + 4*P042*Pf1 + 9*P031*Pf2 - 4*P032*Pf2) + P011*(4*P043*Pf1 + 9*P044*Pf1 - 4*P033*Pf2 - 9*P034*Pf2)) + K^2*(P014*(-3*P041*Pf1 + P042*Pf1 + 3*P031*Pf2 - P032*Pf2) + ...
           P011*(P043*Pf1 + 3*P044*Pf1 - (P033 + 3*P034)*Pf2))))*S1^2));
           
           
           
  N6=4*(B1*B2*(C1^2*(-3*(24 + 11*K + K^2)*P011*(P042*Pf1 - P032*Pf2) - 16*d1^2*k^3*(1 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
       16*d1^2*k^4*(-1 + 2*K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) - 2*k^2*(2*d1^2*(5 + 2*K)*P011*(P042*Pf1 - P032*Pf2) + ...
         3*d1*(4 + 3*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) - 6*K*(3 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + ...
       P012*((4*d1^2*k^2*(5 + 2*K) + 3*(24 + 11*K + K^2))*P041*Pf1 - 3*(24 + 11*K + K^2)*P031*Pf2 - 2*d1*k^2*(-3*(4 + 3*K)*P043*Pf1 + (2*d1*(5 + 2*K)*P031 + 3*(4 + 3*K)*P033)*Pf2) - 16*d1^2*k^3*(1 + K)*(P044*Pf1 - P034*Pf2) - ...
         6*k*(3 + K)*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) + 6*k*(3 + K)*(P014*((-(3 + K))*P041*Pf1 + P042*Pf1 + ((3 + K)*P031 - P032)*Pf2) + ...
         P013*((-P041)*Pf1 + (3 + K)*P042*Pf1 + (P031 - (3 + K)*P032)*Pf2) + P011*(P043*Pf1 + (3 + K)*P044*Pf1 - (P033 + (3 + K)*P034)*Pf2))) + ...
     C1*((108 + 57*K + 7*K^2)*P011*(P042*Pf1 - P032*Pf2) - 4*k^2*(18 + 21*K + 5*K^2)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
       2*k*(P013*((18 + 9*K + K^2)*P041*Pf1 - 6*(5 + 7*K + K^2)*P042*Pf1 - ((18 + 9*K + K^2)*P031 - 6*(5 + 7*K + K^2)*P032)*Pf2) + P014*(6*(5 + 7*K + K^2)*P041*Pf1 - (18 + 9*K + K^2)*P042*Pf1 - ...
           (6*(5 + 7*K + K^2)*P031 - (18 + 9*K + K^2)*P032)*Pf2) + P011*((-(18 + 9*K + K^2))*P043*Pf1 - 6*(5 + 7*K + K^2)*P044*Pf1 + ((18 + 9*K + K^2)*P033 + 6*(5 + 7*K + K^2)*P034)*Pf2)) + ...
       P012*((-(108 + 57*K + 7*K^2))*P041*Pf1 + (108 + 57*K + 7*K^2)*P031*Pf2 + 2*k*(6*(5 + 7*K + K^2)*P043*Pf1 + (18 + 9*K + K^2)*P044*Pf1 - (6*(5 + 7*K + K^2)*P033 + (18 + 9*K + K^2)*P034)*Pf2)))*S1 + ...
     2*(-2*(1 + 8*K + K^2)*P011*(P042*Pf1 - P032*Pf2) + 8*d1^2*k^3*(1 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       8*d1^2*k^4*(-1 + 2*K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + k^2*(2*d1^2*(5 + 2*K)*P011*(P042*Pf1 - P032*Pf2) + ...
         3*d1*(4 + 3*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + 4*(1 + 8*K + K^2)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + ...
       k*(P013*((-(1 + 8*K + K^2))*P041*Pf1 + 3*(3 + K)^2*P042*Pf1 + ((1 + 8*K + K^2)*P031 - 3*(3 + K)^2*P032)*Pf2) + P014*(-3*(3 + K)^2*P041*Pf1 + (1 + 8*K + K^2)*P042*Pf1 + (3*(3 + K)^2*P031 - (1 + 8*K + K^2)*P032)*Pf2) + ...
         P011*((1 + 8*K + K^2)*P043*Pf1 + 3*(3 + K)^2*P044*Pf1 - ((1 + 8*K + K^2)*P033 + 3*(3 + K)^2*P034)*Pf2)) + P012*(2*(1 + 8*K + K^2 - d1^2*k^2*(5 + 2*K))*P041*Pf1 - 2*(1 + 8*K + K^2)*P031*Pf2 + ...
         d1*k^2*(-3*(4 + 3*K)*P043*Pf1 + (2*d1*(5 + 2*K)*P031 + 3*(4 + 3*K)*P033)*Pf2) + 8*d1^2*k^3*(1 + K)*(P044*Pf1 - P034*Pf2) + ...
         k*(-3*(3 + K)^2*P043*Pf1 - (1 + 8*K + K^2)*P044*Pf1 + (3*(3 + K)^2*P033 + (1 + 8*K + K^2)*P034)*Pf2)))*S1^2) + ...
   B1^2*(C1^2*(-2*(9 + 12*K + K^2)*P011*(P042*Pf1 - P032*Pf2) + 8*d1^2*k^3*(4 + 3*K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       16*d1^2*k^4*(1 + 3*K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) - k*(9 + 12*K + K^2)*(P014*(3*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 + P032*Pf2) + P013*(P041*Pf1 - 3*P042*Pf1 - P031*Pf2 + 3*P032*Pf2) + ...
         P011*((-P043)*Pf1 - 3*P044*Pf1 + P033*Pf2 + 3*P034*Pf2)) + 2*k^2*(2*d1^2*(7 + 3*K)*P011*(P042*Pf1 - P032*Pf2) + 3*d1*(8 + 5*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + ...
           P011*P034*Pf2) + 2*(9 + 12*K + K^2)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*(2*(9 + 12*K + K^2 - 2*d1^2*k^2*(7 + 3*K))*P041*Pf1 - 2*(9 + 12*K + K^2)*P031*Pf2 + ...
         2*d1*k^2*(-3*(8 + 5*K)*P043*Pf1 + (2*d1*(7 + 3*K)*P031 + 3*(8 + 5*K)*P033)*Pf2) + 8*d1^2*k^3*(4 + 3*K)*(P044*Pf1 - P034*Pf2) - k*(9 + 12*K + K^2)*(3*P043*Pf1 + P044*Pf1 - (3*P033 + P034)*Pf2))) - ...
     3*C1*((-(36 + 21*K + K^2))*P011*(P042*Pf1 - P032*Pf2) + 4*k^2*K*(5 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
       P012*((36 + 21*K + K^2)*P041*Pf1 - (36 + 21*K + K^2)*P031*Pf2 - 2*k*((13 + 11*K + K^2)*P043*Pf1 + (3 + 2*K)*P044*Pf1 - ((13 + 11*K + K^2)*P033 + (3 + 2*K)*P034)*Pf2)) - ...
       2*k*(P014*((13 + 11*K + K^2)*P041*Pf1 - (3 + 2*K)*P042*Pf1 - ((13 + 11*K + K^2)*P031 - (3 + 2*K)*P032)*Pf2) + P013*((3 + 2*K)*P041*Pf1 - (13 + 11*K + K^2)*P042*Pf1 + ((-(3 + 2*K))*P031 + (13 + 11*K + K^2)*P032)*Pf2) + ...
         P011*((-(3 + 2*K))*P043*Pf1 - (13 + 11*K + K^2)*P044*Pf1 + ((3 + 2*K)*P033 + (13 + 11*K + K^2)*P034)*Pf2)))*S1 + ...
     ((-(106 + 35*K + K^2))*P011*(P042*Pf1 - P032*Pf2) - 8*d1^2*k^3*(4 + 3*K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
       16*d1^2*k^4*(1 + 3*K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) - 2*k^2*(2*d1^2*(7 + 3*K)*P011*(P042*Pf1 - P032*Pf2) + ...
         3*d1*(8 + 5*K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) - 2*(-1 + K + 2*K^2)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + ...
       P012*((106 + 35*K + K^2 + 4*d1^2*k^2*(7 + 3*K))*P041*Pf1 - (106 + 35*K + K^2)*P031*Pf2 - 2*d1*k^2*(-3*(8 + 5*K)*P043*Pf1 + (2*d1*(7 + 3*K)*P031 + 3*(8 + 5*K)*P033)*Pf2) - 8*d1^2*k^3*(4 + 3*K)*(P044*Pf1 - P034*Pf2) - ...
         k*(3*(9 + 12*K + K^2)*P043*Pf1 - (-17 + 2*K + K^2)*P044*Pf1 - (3*(9 + 12*K + K^2)*P033 - (-17 + 2*K + K^2)*P034)*Pf2)) + ...
       k*(P014*(-3*(9 + 12*K + K^2)*P041*Pf1 - (-17 + 2*K + K^2)*P042*Pf1 + (3*(9 + 12*K + K^2)*P031 + (-17 + 2*K + K^2)*P032)*Pf2) + P013*((-17 + 2*K + K^2)*P041*Pf1 + 3*(9 + 12*K + K^2)*P042*Pf1 - ...
           ((-17 + 2*K + K^2)*P031 + 3*(9 + 12*K + K^2)*P032)*Pf2) + P011*((-(-17 + 2*K + K^2))*P043*Pf1 + 3*(9 + 12*K + K^2)*P044*Pf1 + ((-17 + 2*K + K^2)*P033 - 3*(9 + 12*K + K^2)*P034)*Pf2)))*S1^2) +... 
   B2^2*(C1^2*(-12*d1*k^2*(2 + K)*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) - ...
       9*((2 + K)*P011*(P042*Pf1 - P032*Pf2) + k*K*(P014*P041*Pf1 - P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 + P011*P034*Pf2)) + ...
       4*d1^2*k^2*(2 + K)*((-P011)*P042*Pf1 + P011*P032*Pf2 - 2*k*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
         4*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*((9 + 4*d1^2*k^2)*(2 + K)*P041*Pf1 + 12*d1*k^2*(2 + K)*(P043*Pf1 - P033*Pf2) - 4*d1^2*k^2*(2 + K)*(2*k*P044*Pf1 + P031*Pf2 - 2*k*P034*Pf2) - ...
         9*((2 + K)*P031*Pf2 + k*K*(P043*Pf1 - P033*Pf2)))) - 6*C1*(-4*k*(P014*P041*Pf1 - P013*P042*Pf1 + P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 + P013*P032*Pf2 - P012*P033*Pf2 + P011*P034*Pf2) + ...
       K*(-2*P011*P042*Pf1 + 2*P011*P032*Pf2 + 4*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*(2*P041*Pf1 - 2*P031*Pf2 + k*(-2*P043*Pf1 - P044*Pf1 + 2*P033*Pf2 + P034*Pf2)) + ...
         k*(P013*((-P041)*Pf1 + 2*P042*Pf1 + (P031 - 2*P032)*Pf2) + P014*(-2*P041*Pf1 + P042*Pf1 + 2*P031*Pf2 - P032*Pf2) + P011*(P043*Pf1 + 2*P044*Pf1 - (P033 + 2*P034)*Pf2))))*S1 + ...
     ((2 + K)*P011*(P042*Pf1 - P032*Pf2) + 8*d1^2*k^3*(2 + K)*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       16*d1^2*k^4*(2 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*((-(1 + 4*d1^2*k^2))*(2 + K)*P041*Pf1 - 9*k*K*P043*Pf1 - 8*k*P044*Pf1 - 4*k*K*P044*Pf1 + 2*P031*Pf2 + K*P031*Pf2 + ...
         9*k*K*P033*Pf2 + 8*k*P034*Pf2 + 4*k*K*P034*Pf2 - 12*d1*k^2*(2 + K)*(P043*Pf1 - P033*Pf2) + 4*d1^2*k^2*(2 + K)*(2*k*P044*Pf1 + P031*Pf2 - 2*k*P034*Pf2)) + ...
       4*k^2*(2 + K)*(d1^2*P011*(P042*Pf1 - P032*Pf2) + 3*d1*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + 4*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + ...
       k*(P013*(-4*(2 + K)*P041*Pf1 + 9*K*P042*Pf1 + 8*P031*Pf2 + 4*K*P031*Pf2 - 9*K*P032*Pf2) + 8*(P014*P042*Pf1 + P011*P043*Pf1 - P014*P032*Pf2 - P011*P033*Pf2) + ...
         K*(P014*(-9*P041*Pf1 + 4*P042*Pf1 + 9*P031*Pf2 - 4*P032*Pf2) + P011*(4*P043*Pf1 + 9*P044*Pf1 - 4*P033*Pf2 - 9*P034*Pf2))))*S1^2));
         
         
         
 N7=-3*(C1 - S1)*(2*B1*(2*C1*(2*(3 + K)*P011*(P042*Pf1 - P032*Pf2) - 4*d1^2*k^3*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
       8*d1^2*k^4*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + k*(3 + K)*(P014*(3*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 + P032*Pf2) + P013*(P041*Pf1 - 3*P042*Pf1 - P031*Pf2 + 3*P032*Pf2) + ...
         P011*((-P043)*Pf1 - 3*P044*Pf1 + P033*Pf2 + 3*P034*Pf2)) - 2*k^2*(d1^2*P011*(P042*Pf1 - P032*Pf2) + 3*d1*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P011*P034*Pf2) + ...
         2*(3 + K)*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + P012*(2*(-3 + d1^2*k^2 - K)*P041*Pf1 + 2*(3 + K)*P031*Pf2 - 2*d1*k^2*(-3*P043*Pf1 + d1*P031*Pf2 + 3*P033*Pf2) + ...
         4*d1^2*k^3*((-P044)*Pf1 + P034*Pf2) + k*(3 + K)*(3*P043*Pf1 + P044*Pf1 - (3*P033 + P034)*Pf2))) + ...
     (-3*(8 + K)*P011*(P042*Pf1 - P032*Pf2) - 8*d1^2*k^3*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) - ...
       16*d1^2*k^4*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) - 4*k^2*(d1^2*P011*(P042*Pf1 - P032*Pf2) + 3*d1*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + ...
           P011*P034*Pf2) + 3*K*((-P014)*P043*Pf1 + P013*P044*Pf1 + P014*P033*Pf2 - P013*P034*Pf2)) + P012*((4*d1^2*k^2 + 3*(8 + K))*P041*Pf1 - 3*(8 + K)*P031*Pf2 - 4*d1*k^2*(-3*P043*Pf1 + d1*P031*Pf2 + 3*P033*Pf2) - ...
         8*d1^2*k^3*(P044*Pf1 - P034*Pf2) - 6*k*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) - 6*k*(P014*((3 + K)*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 - K*P031*Pf2 + P032*Pf2) + ...
         P013*(P041*Pf1 - (3 + K)*P042*Pf1 + (-P031 + (3 + K)*P032)*Pf2) + P011*((-P043)*Pf1 - (3 + K)*P044*Pf1 + (P033 + (3 + K)*P034)*Pf2)))*S1) + ...
   B2*(C1*(3*(8 + K)*P011*(P042*Pf1 - P032*Pf2) + 16*d1^2*k^3*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + ...
       32*d1^2*k^4*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + 4*k^2*(2*d1^2*P011*(P042*Pf1 - P032*Pf2) + 6*d1*(P014*P041*Pf1 + P013*P042*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + ...
           P011*P034*Pf2) + 3*K*((-P014)*P043*Pf1 + P013*P044*Pf1 + P014*P033*Pf2 - P013*P034*Pf2)) + P012*((-(8*d1^2*k^2 + 3*(8 + K)))*P041*Pf1 + 3*(8 + K)*P031*Pf2 + 8*d1*k^2*(-3*P043*Pf1 + d1*P031*Pf2 + 3*P033*Pf2) + ...
         16*d1^2*k^3*(P044*Pf1 - P034*Pf2) + 6*k*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) + 6*k*(P014*((3 + K)*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 - K*P031*Pf2 + P032*Pf2) + ...
         P013*(P041*Pf1 - (3 + K)*P042*Pf1 + (-P031 + (3 + K)*P032)*Pf2) + P011*((-P043)*Pf1 - (3 + K)*P044*Pf1 + (P033 + (3 + K)*P034)*Pf2))) + ...
     (24*d1*k^2*(P014*P041*Pf1 + P013*P042*Pf1 - P012*P043*Pf1 - P011*P044*Pf1 - P014*P031*Pf2 - P013*P032*Pf2 + P012*P033*Pf2 + P011*P034*Pf2) + ...
       6*k*(P011*P043*Pf1 - 3*P012*P043*Pf1 + 3*P011*P044*Pf1 - P012*P044*Pf1 - P011*P033*Pf2 + 3*P012*P033*Pf2 - 3*P011*P034*Pf2 + P012*P034*Pf2 + ...
         P014*(-3*P041*Pf1 + P042*Pf1 + 8*k*P043*Pf1 + 3*P031*Pf2 - P032*Pf2 - 8*k*P033*Pf2) + P013*((-P041)*Pf1 + 3*P042*Pf1 - 8*k*P044*Pf1 + P031*Pf2 - 3*P032*Pf2 + 8*k*P034*Pf2)) - ...
       8*d1^2*k^2*((-P011)*P042*Pf1 + P011*P032*Pf2 - 2*k*(P013*P041*Pf1 - P014*P042*Pf1 - P011*P043*Pf1 - P013*P031*Pf2 + P014*P032*Pf2 + P011*P033*Pf2) + P012*(P041*Pf1 - 2*k*P044*Pf1 - P031*Pf2 + 2*k*P034*Pf2) - ...
         4*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2)) + K*(-5*P011*P042*Pf1 + 5*P011*P032*Pf2 + 4*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + ...
         k*(P013*(-4*P041*Pf1 + 6*P042*Pf1 + 4*P031*Pf2 - 6*P032*Pf2) + P014*(-6*P041*Pf1 + 4*P042*Pf1 + 6*P031*Pf2 - 4*P032*Pf2) + 2*P011*(2*P043*Pf1 + 3*P044*Pf1 - 2*P033*Pf2 - 3*P034*Pf2)) + ...
         P012*(5*P041*Pf1 - 5*P031*Pf2 + k*(-6*P043*Pf1 - 4*P044*Pf1 + 6*P033*Pf2 + 4*P034*Pf2))))*S1));
         
         
         
         
N8=9*(-2*P011*P042*Pf1 + 2*P011*P032*Pf2 + 4*k^2*(P014*P043*Pf1 - P013*P044*Pf1 - P014*P033*Pf2 + P013*P034*Pf2) + P012*(2*P041*Pf1 - 2*P031*Pf2 + k*(-3*P043*Pf1 - P044*Pf1 + 3*P033*Pf2 + P034*Pf2)) + ...
   k*(P013*((-P041)*Pf1 + 3*P042*Pf1 + (P031 - 3*P032)*Pf2) + P014*(-3*P041*Pf1 + P042*Pf1 + 3*P031*Pf2 - P032*Pf2) + P011*(P043*Pf1 + 3*P044*Pf1 - (P033 + 3*P034)*Pf2)))*(C1 - S1)^2;


function [N1,N2,N3,N4,N5,N6,N7,N8] = Num2_2visc(PzsF,B1,B2,K,k,d1,P0,u)

P011=P0(1,1);P012=P0(1,2);P013=P0(1,3);P014=P0(1,4);
P021=P0(2,1);P022=P0(2,2);P023=P0(2,3);P024=P0(2,4);
P031=P0(3,1);P032=P0(3,2);P033=P0(3,3);P034=P0(3,4);
P041=P0(4,1);P042=P0(4,2);P043=P0(4,3);P044=P0(4,4);


C1=cosh(k*d1);S1=sinh(k*d1);

Pf1=PzsF(1);
Pf2=PzsF(2);

N1=64*B1^4*B2*K^3*(P022*P041*Pf1 - P021*P042*Pf1 - P022*P031*Pf2 + P021*P032*Pf2)*(-2*B1*B2*C1*S1 + B2^2*(C1^2*(1 + d1^2*k^2) - d1^2*k^2*S1^2) + B1^2*((-C1^2)*d1^2*k^2 + (1 + d1^2*k^2)*S1^2));

N2=-64*B1^3*K^2*(B1^3*(P022*P041*Pf1 - P021*P042*Pf1 - P022*P031*Pf2 + P021*P032*Pf2)*(C1^2*d1^2*k^2 - (1 + d1^2*k^2)*S1^2) + ...
   B1*B2^2*(C1^2*((2 + K)*P021*(P042*Pf1 - P032*Pf2) + d1^2*k^2*(2 + K)*P021*(P042*Pf1 - P032*Pf2) + k*K*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2) + ...
       P022*((-(1 + d1^2*k^2))*(2 + K)*P041*Pf1 + (2 + K)*P031*Pf2 + d1^2*k^2*(2 + K)*P031*Pf2 + k*K*(P043*Pf1 - P033*Pf2))) + C1*(7 + 3*K)*(P022*P041*Pf1 - P021*P042*Pf1 - P022*P031*Pf2 + P021*P032*Pf2)*S1 + ...
     k*(d1^2*k*(2 + K)*(P022*P041*Pf1 - P021*P042*Pf1 - P022*P031*Pf2 + P021*P032*Pf2) + K*(P024*P041*Pf1 - P023*P042*Pf1 + P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 - P022*P033*Pf2 + P021*P034*Pf2))*S1^2) + ...
   B1^2*B2*(C1^2*d1*k^2*(K*((-P024)*P041*Pf1 - P023*P042*Pf1 + P022*P043*Pf1 + P021*P044*Pf1 + P024*P031*Pf2 + P023*P032*Pf2 - P022*P033*Pf2 - P021*P034*Pf2) + ...
       d1*((-(3 + 2*K))*P021*(P042*Pf1 - P032*Pf2) + k*K*((-P023)*P041*Pf1 + P024*P042*Pf1 + P021*P043*Pf1 + P023*P031*Pf2 - P024*P032*Pf2 - P021*P033*Pf2) + ...
         P022*((3 + 2*K)*P041*Pf1 - (3 + 2*K)*P031*Pf2 + k*K*((-P044)*Pf1 + P034*Pf2)))) + ...
     C1*((-(3 + K))*P021*(P042*Pf1 - P032*Pf2) + k*K*((-P024)*P041*Pf1 + P023*P042*Pf1 + P021*P044*Pf1 + P024*P031*Pf2 - P023*P032*Pf2 - P021*P034*Pf2) + ...
       P022*((3 + K)*P041*Pf1 - (3 + K)*P031*Pf2 + k*K*((-P043)*Pf1 + P033*Pf2)))*S1 + ...
     (2*(2 + K)*P021*(P042*Pf1 - P032*Pf2) + d1*k^2*K*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + ...
       d1^2*k^2*((3 + 2*K)*P021*(P042*Pf1 - P032*Pf2) + k*K*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2)) + ...
       P022*((-(2*(2 + K) + d1^2*k^2*(3 + 2*K)))*P041*Pf1 + 2*(2 + K)*P031*Pf2 + d1*k^2*K*((-P043)*Pf1 + P033*Pf2) + d1^2*k^2*((3 + 2*K)*P031*Pf2 + k*K*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   B2^3*(C1^2*((3 + K)*P021*(P042*Pf1 - P032*Pf2) + d1*k^2*K*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + ...
       d1^2*k^2*((2 + K)*P021*(P042*Pf1 - P032*Pf2) + k*K*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2)) + ...
       P022*((-(3 + K + d1^2*k^2*(2 + K)))*P041*Pf1 + (3 + K)*P031*Pf2 + d1*k^2*K*((-P043)*Pf1 + P033*Pf2) + d1^2*k^2*((2 + K)*P031*Pf2 + k*K*(P044*Pf1 - P034*Pf2)))) + ...
     C1*k*K*((-P024)*P041*Pf1 + P023*P042*Pf1 - P022*P043*Pf1 + P021*P044*Pf1 + P024*P031*Pf2 - P023*P032*Pf2 + P022*P033*Pf2 - P021*P034*Pf2)*S1 + ...
     d1*k^2*(K*((-P024)*P041*Pf1 - P023*P042*Pf1 + P022*P043*Pf1 + P021*P044*Pf1 + P024*P031*Pf2 + P023*P032*Pf2 - P022*P033*Pf2 - P021*P034*Pf2) + ...
       d1*((-(2 + K))*P021*(P042*Pf1 - P032*Pf2) + k*K*((-P023)*P041*Pf1 + P024*P042*Pf1 + P021*P043*Pf1 + P023*P031*Pf2 - P024*P032*Pf2 - P021*P033*Pf2) + ...
         P022*((2 + K)*P041*Pf1 - (2 + K)*P031*Pf2 + k*K*((-P044)*Pf1 + P034*Pf2))))*S1^2));
         
         
N3=16*B1^2*K*(B1^2*B2*(C1^2*(2*d1*k^2*K*(7 + 3*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P022*P033*Pf2 + P021*P034*Pf2) + ...
       d1^2*k^2*((12 + 14*K + 5*K^2)*P021*(P042*Pf1 - P032*Pf2) + 6*k*K*(2 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
         4*k^2*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*((-(12 + 14*K + 5*K^2))*P041*Pf1 + (12 + 14*K + 5*K^2)*P031*Pf2 + 6*k*K*(2 + K)*(P044*Pf1 - P034*Pf2))) + ...
       K*((-(8 + K))*P021*(P042*Pf1 - P032*Pf2) + 4*k^2*K*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
         P022*((8 + K)*P041*Pf1 - (8 + K)*P031*Pf2 - 2*k*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) - 2*k*(P024*((3 + K)*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 - K*P031*Pf2 + P032*Pf2) + ...
           P023*(P041*Pf1 - (3 + K)*P042*Pf1 + (-P031 + (3 + K)*P032)*Pf2) + P021*((-P043)*Pf1 - (3 + K)*P044*Pf1 + (P033 + (3 + K)*P034)*Pf2)))) - ...
     2*C1*(7 + 3*K)*((-(3 + K))*P021*(P042*Pf1 - P032*Pf2) + k*K*((-P024)*P041*Pf1 + P023*P042*Pf1 + P021*P044*Pf1 + P024*P031*Pf2 - P023*P032*Pf2 - P021*P034*Pf2) + ...
       P022*((3 + K)*P041*Pf1 - (3 + K)*P031*Pf2 + k*K*((-P043)*Pf1 + P033*Pf2)))*S1 + (-2*d1*k^2*K*(7 + 3*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) - ...
       2*((9 + 16*K + 3*K^2)*P021*(P042*Pf1 - P032*Pf2) + k*K*(3 + K)*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2)) + ...
       d1^2*k^2*((-(12 + 14*K + 5*K^2))*P021*(P042*Pf1 - P032*Pf2) - 6*k*K*(2 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
         4*k^2*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*((18 + 32*K + 6*K^2 + d1^2*k^2*(12 + 14*K + 5*K^2))*P041*Pf1 - 2*(9 + 16*K + 3*K^2)*P031*Pf2 - 2*k*K*(3 + K)*(P043*Pf1 - P033*Pf2) - ...
         6*d1^2*k^3*K*(2 + K)*(P044*Pf1 - P034*Pf2) - d1*k^2*(12*d1*P031*Pf2 + K^2*(-6*P043*Pf1 + 5*d1*P031*Pf2 + 6*P033*Pf2) - 14*K*(P043*Pf1 - (d1*P031 + P033)*Pf2))))*S1^2) + ...
   2*B1*B2^2*(2*C1^2*((-d1)*k^2*K*(2 + K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) - ...
       d1^2*k^2*(2 + K)*((2 + K)*P021*(P042*Pf1 - P032*Pf2) + k*K*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2)) - ...
       (3 + K)*((2 + K)*P021*(P042*Pf1 - P032*Pf2) + k*K*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2)) + ...
       P022*((2 + K)*(3 + K + d1^2*k^2*(2 + K))*P041*Pf1 - (6 + 5*K + K^2)*P031*Pf2 - k*K*(3 + K)*(P043*Pf1 - P033*Pf2) - d1^2*k^3*K*(2 + K)*(P044*Pf1 - P034*Pf2) - ...
         d1*k^2*(2 + K)*(2*d1*P031*Pf2 + K*((-P043)*Pf1 + (d1*P031 + P033)*Pf2)))) + C1*(3*(4 + 7*K + K^2)*P021*(P042*Pf1 - P032*Pf2) - 4*k^2*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
       P022*(-3*(4 + 7*K + K^2)*P041*Pf1 + 3*(4 + 7*K + K^2)*P031*Pf2 + 2*k*K*((2 + K)*P043*Pf1 + P044*Pf1 - ((2 + K)*P033 + P034)*Pf2)) - ...
       2*k*K*(P024*((-(2 + K))*P041*Pf1 + P042*Pf1 + ((2 + K)*P031 - P032)*Pf2) + P023*((-P041)*Pf1 + (2 + K)*P042*Pf1 + (P031 - (2 + K)*P032)*Pf2) + P021*(P043*Pf1 + (2 + K)*P044*Pf1 - (P033 + (2 + K)*P034)*Pf2)))*S1 + ...
     2*k*((-K)*(3 + K)*(P024*P041*Pf1 - P023*P042*Pf1 + P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 - P022*P033*Pf2 + P021*P034*Pf2) + ...
       d1*k*K*(2 + K)*(P024*P041*Pf1 + P023*P042*Pf1 - P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P022*P033*Pf2 + P021*P034*Pf2) + ...
       d1^2*k*(2 + K)*((2 + K)*P021*(P042*Pf1 - P032*Pf2) + k*K*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
         P022*((-(2 + K))*P041*Pf1 + (2 + K)*P031*Pf2 + k*K*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   2*B1^3*(C1^2*d1*k^2*(2*K*(P024*P041*Pf1 + P023*P042*Pf1 - P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P022*P033*Pf2 + P021*P034*Pf2) + ...
       d1*((4 + 5*K)*P021*(P042*Pf1 - P032*Pf2) + 2*k*K*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
         P022*((-(4 + 5*K))*P041*Pf1 + (4 + 5*K)*P031*Pf2 + 2*k*K*(P044*Pf1 - P034*Pf2)))) + C1*K*(3*P021*(P042*Pf1 - P032*Pf2) + P022*(-3*P041*Pf1 + 2*k*P043*Pf1 + 3*P031*Pf2 - 2*k*P033*Pf2) + ...
       2*k*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2))*S1 + ...
     (-4*(2 + K)*P021*(P042*Pf1 - P032*Pf2) - 2*d1*k^2*K*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + ...
       d1^2*k^2*((-(4 + 5*K))*P021*(P042*Pf1 - P032*Pf2) - 2*k*K*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2)) + ...
       P022*((4*(2 + K) + d1^2*k^2*(4 + 5*K))*P041*Pf1 - 4*(2 + K)*P031*Pf2 + 2*d1*k^2*K*(P043*Pf1 - P033*Pf2) - d1^2*k^2*((4 + 5*K)*P031*Pf2 + 2*k*K*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   B2^3*(C1^2*((-(9 + 12*K + K^2))*P021*(P042*Pf1 - P032*Pf2) - 2*d1*k^2*K*(5 + K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + ...
       d1^2*k^2*((-(4 + 8*K + K^2))*P021*(P042*Pf1 - P032*Pf2) - 2*k*K*(4 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
         4*k^2*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*((9 + 12*K + K^2 + d1^2*k^2*(4 + 8*K + K^2))*P041*Pf1 - (9 + 12*K + K^2)*P031*Pf2 + 2*d1*k^2*K*(5 + K)*(P043*Pf1 - P033*Pf2) - ...
         d1^2*k^2*((4 + 8*K + K^2)*P031*Pf2 + 2*k*K*(4 + K)*(P044*Pf1 - P034*Pf2)))) + 2*C1*k*K*(5 + K)*(P024*P041*Pf1 - P023*P042*Pf1 + P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 - P022*P033*Pf2 + ...
       P021*P034*Pf2)*S1 + (P021*(P042*Pf1 - P032*Pf2) - 2*k*K*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       2*d1^2*k^3*K*(4 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + 4*d1^2*k^4*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
       k^2*(d1^2*(4 + 8*K + K^2)*P021*(P042*Pf1 - P032*Pf2) + 2*d1*K*(5 + K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + ...
         4*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*((-(1 + d1^2*k^2*(4 + 8*K + K^2)))*P041*Pf1 - 2*k*K*P044*Pf1 + P031*Pf2 + 2*k*K*P034*Pf2 - 2*d1*k^2*K*(5 + K)*(P043*Pf1 - P033*Pf2) + ...
         d1^2*k^2*((4 + 8*K + K^2)*P031*Pf2 + 2*k*K*(4 + K)*(P044*Pf1 - P034*Pf2))))*S1^2));
         
         
   N4=16*B1*(B1*B2^2*(C1^2*(-2*d1*k^2*K*(10 + 7*K + K^2)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) - ...
       (9 + 12*K + K^2)*((2 + K)*P021*(P042*Pf1 - P032*Pf2) + k*K*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2)) + ...
       d1^2*k^2*(2 + K)*((-(4 + 8*K + K^2))*P021*(P042*Pf1 - P032*Pf2) - 2*k*K*(4 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
         4*k^2*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*((2 + K)*(9 + 12*K + K^2 + d1^2*k^2*(4 + 8*K + K^2))*P041*Pf1 - (18 + 33*K + 14*K^2 + K^3)*P031*Pf2 - ...
         k*K*(9 + 12*K + K^2)*(P043*Pf1 - P033*Pf2) - 2*d1^2*k^3*K*(8 + 6*K + K^2)*(P044*Pf1 - P034*Pf2) - d1*k^2*(2 + K)*(4*d1*P031*Pf2 + K^2*(-2*P043*Pf1 + d1*P031*Pf2 + 2*P033*Pf2) + ...
           2*K*(-5*P043*Pf1 + 4*d1*P031*Pf2 + 5*P033*Pf2)))) + C1*K*((36 + 21*K + K^2)*P021*(P042*Pf1 - P032*Pf2) - 4*k^2*K*(5 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
       P022*((-(36 + 21*K + K^2))*P041*Pf1 + (36 + 21*K + K^2)*P031*Pf2 + 2*k*((10 + 7*K + K^2)*P043*Pf1 + (3 + 2*K)*P044*Pf1 - ((10 + 7*K + K^2)*P033 + (3 + 2*K)*P034)*Pf2)) + ...
       2*k*(P024*((10 + 7*K + K^2)*P041*Pf1 - (3 + 2*K)*P042*Pf1 - ((10 + 7*K + K^2)*P031 - (3 + 2*K)*P032)*Pf2) + P023*((3 + 2*K)*P041*Pf1 - (10 + 7*K + K^2)*P042*Pf1 + ((-(3 + 2*K))*P031 + (10 + 7*K + K^2)*P032)*Pf2) + ...
         P021*((-(3 + 2*K))*P043*Pf1 - (10 + 7*K + K^2)*P044*Pf1 + ((3 + 2*K)*P033 + (10 + 7*K + K^2)*P034)*Pf2)))*S1 + ...
     ((2 + K)*P021*(P042*Pf1 - P032*Pf2) + 2*d1^2*k^3*K*(8 + 6*K + K^2)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       4*d1^2*k^4*K^2*(2 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + k^2*(2 + K)*(d1^2*(4 + 8*K + K^2)*P021*(P042*Pf1 - P032*Pf2) + ...
         2*d1*K*(5 + K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + 4*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + ...
       k*K*(P024*((-(9 + 12*K + K^2))*P041*Pf1 + 2*(2 + K)*P042*Pf1 + ((9 + 12*K + K^2)*P031 - 2*(2 + K)*P032)*Pf2) + P023*(-2*(2 + K)*P041*Pf1 + (9 + 12*K + K^2)*P042*Pf1 + (2*(2 + K)*P031 - (9 + 12*K + K^2)*P032)*Pf2) + ...
         P021*(2*(2 + K)*P043*Pf1 + (9 + 12*K + K^2)*P044*Pf1 - (2*(2 + K)*P033 + (9 + 12*K + K^2)*P034)*Pf2)) + P022*((-(2 + K))*(1 + d1^2*k^2*(4 + 8*K + K^2))*P041*Pf1 + (2 + K)*P031*Pf2 + ...
         2*d1^2*k^3*K*(8 + 6*K + K^2)*(P044*Pf1 - P034*Pf2) + k*K*((-(9 + 12*K + K^2))*P043*Pf1 - 2*(2 + K)*P044*Pf1 + ((9 + 12*K + K^2)*P033 + 2*(2 + K)*P034)*Pf2) + ...
         d1*k^2*(2 + K)*(4*d1*P031*Pf2 + K^2*(-2*P043*Pf1 + d1*P031*Pf2 + 2*P033*Pf2) + 2*K*(-5*P043*Pf1 + 4*d1*P031*Pf2 + 5*P033*Pf2))))*S1^2) + ...
   B1^2*B2*(C1^2*(d1*k^2*K*(16 + 11*K + 2*K^2)*(P024*P041*Pf1 + P023*P042*Pf1 - P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P022*P033*Pf2 + P021*P034*Pf2) + ...
       d1^2*k^2*((4 + 4*K + 5*K^2 + K^3)*P021*(P042*Pf1 - P032*Pf2) + 2*k*K*(6 + 4*K + K^2)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
         4*k^2*K^2*(3 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*((-(4 + 4*K + 5*K^2 + K^3))*P041*Pf1 + (4 + 4*K + 5*K^2 + K^3)*P031*Pf2 + 2*k*K*(6 + 4*K + K^2)*(P044*Pf1 - P034*Pf2))) + ...
       K*(3 + K)*((-(8 + K))*P021*(P042*Pf1 - P032*Pf2) + 4*k^2*K*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
         P022*((8 + K)*P041*Pf1 - (8 + K)*P031*Pf2 - 2*k*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) - 2*k*(P024*((3 + K)*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 - K*P031*Pf2 + P032*Pf2) + ...
           P023*(P041*Pf1 - (3 + K)*P042*Pf1 + (-P031 + (3 + K)*P032)*Pf2) + P021*((-P043)*Pf1 - (3 + K)*P044*Pf1 + (P033 + (3 + K)*P034)*Pf2)))) + ...
     C1*(3*(12 + 25*K + 10*K^2 + K^3)*P021*(P042*Pf1 - P032*Pf2) - 4*k^2*K^2*(3 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
       P022*(-3*(12 + 25*K + 10*K^2 + K^3)*P041*Pf1 + 3*(12 + 25*K + 10*K^2 + K^3)*P031*Pf2 + k*K*((14 + 29*K + 4*K^2)*P043*Pf1 + 2*(3 + K)*P044*Pf1 - ((14 + 29*K + 4*K^2)*P033 + 2*(3 + K)*P034)*Pf2)) + ...
       k*K*(P024*((14 + 29*K + 4*K^2)*P041*Pf1 - 2*(3 + K)*P042*Pf1 - ((14 + 29*K + 4*K^2)*P031 - 2*(3 + K)*P032)*Pf2) + P023*(2*(3 + K)*P041*Pf1 - (14 + 29*K + 4*K^2)*P042*Pf1 + ...
           (-2*(3 + K)*P031 + (14 + 29*K + 4*K^2)*P032)*Pf2) + P021*(-2*(3 + K)*P043*Pf1 - (14 + 29*K + 4*K^2)*P044*Pf1 + (2*(3 + K)*P033 + (14 + 29*K + 4*K^2)*P034)*Pf2)))*S1 + ...
     ((-(4 + 35*K + 24*K^2 + 2*K^3))*P021*(P042*Pf1 - P032*Pf2) - 2*d1^2*k^3*K*(6 + 4*K + K^2)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
       4*d1^2*k^4*K^2*(3 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + d1*k^2*(4*d1*P021*((-P042)*Pf1 + P032*Pf2) + ...
         K^2*(-11*P024*P041*Pf1 - 5*d1*P021*P042*Pf1 - 11*P023*P042*Pf1 + 11*P021*P044*Pf1 + 11*P024*P031*Pf2 + 5*d1*P021*P032*Pf2 + 11*P023*P032*Pf2 - 11*P021*P034*Pf2) + ...
         K^3*(-2*P024*P041*Pf1 - d1*P021*P042*Pf1 - 2*P023*P042*Pf1 + 2*P021*P044*Pf1 + 2*P024*P031*Pf2 + d1*P021*P032*Pf2 + 2*P023*P032*Pf2 - 2*P021*P034*Pf2) - ...
         4*K*(4*P024*P041*Pf1 + d1*P021*P042*Pf1 + 4*P023*P042*Pf1 - 4*P021*P044*Pf1 - 4*P024*P031*Pf2 - d1*P021*P032*Pf2 - 4*P023*P032*Pf2 + 4*P021*P034*Pf2)) + ...
       k*K*(P024*(-2*(3 + K)^2*P041*Pf1 + (-2 + K)*P042*Pf1 + (2*(3 + K)^2*P031 - (-2 + K)*P032)*Pf2) + P023*((-(-2 + K))*P041*Pf1 + 2*(3 + K)^2*P042*Pf1 + ((-2 + K)*P031 - 2*(3 + K)^2*P032)*Pf2) + ...
         P021*((-2 + K)*P043*Pf1 + 2*(3 + K)^2*P044*Pf1 - ((-2 + K)*P033 + 2*(3 + K)^2*P034)*Pf2)) + P022*((4 + 35*K + 24*K^2 + 2*K^3 + d1^2*k^2*(4 + 4*K + 5*K^2 + K^3))*P041*Pf1 - (4 + 35*K + 24*K^2 + 2*K^3)*P031*Pf2 - ...
         2*d1^2*k^3*K*(6 + 4*K + K^2)*(P044*Pf1 - P034*Pf2) - k*K*(2*(3 + K)^2*P043*Pf1 + (-2 + K)*P044*Pf1 - (2*(3 + K)^2*P033 + (-2 + K)*P034)*Pf2) - ...
         d1*k^2*(4*d1*P031*Pf2 + K^3*(-2*P043*Pf1 + d1*P031*Pf2 + 2*P033*Pf2) + 4*K*(-4*P043*Pf1 + d1*P031*Pf2 + 4*P033*Pf2) + K^2*(-11*P043*Pf1 + 5*d1*P031*Pf2 + 11*P033*Pf2))))*S1^2) + ...
   B2^3*K*(C1^2*(-3*(3 + K)*P021*(P042*Pf1 - P032*Pf2) - d1*k^2*(6 + 5*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + ...
       2*d1^2*k^2*((-(2 + K))*P021*(P042*Pf1 - P032*Pf2) - 2*k*(1 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
         4*k^2*K*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*((2*d1^2*k^2*(2 + K) + 3*(3 + K))*P041*Pf1 - 3*(3 + K)*P031*Pf2 + d1*k^2*(6 + 5*K)*(P043*Pf1 - P033*Pf2) - ...
         2*d1^2*k^2*((2 + K)*P031*Pf2 + 2*k*(1 + K)*(P044*Pf1 - P034*Pf2)))) + C1*k*(6 + 5*K)*(P024*P041*Pf1 - P023*P042*Pf1 + P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 - P022*P033*Pf2 + P021*P034*Pf2)*S1 + ...
     (P021*(P042*Pf1 - P032*Pf2) + 4*d1^2*k^3*(1 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
       k*(2 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + 8*d1^2*k^4*K*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
       k^2*(2*d1^2*(2 + K)*P021*(P042*Pf1 - P032*Pf2) + d1*(6 + 5*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + ...
         8*K*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*((-(1 + 2*d1^2*k^2*(2 + K)))*P041*Pf1 - 2*k*P044*Pf1 - k*K*P044*Pf1 + P031*Pf2 + 2*k*P034*Pf2 + k*K*P034*Pf2 - ...
         d1*k^2*(6 + 5*K)*(P043*Pf1 - P033*Pf2) + 2*d1^2*k^2*((2 + K)*P031*Pf2 + 2*k*(1 + K)*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   B1^3*(C1^2*(2*d1*k^2*K*(5 + 4*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P022*P033*Pf2 + P021*P034*Pf2) + ...
       d1^2*k^2*((4 + 20*K + 7*K^2)*P021*(P042*Pf1 - P032*Pf2) + 8*k*K*(1 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
         4*k^2*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*((-(4 + 20*K + 7*K^2))*P041*Pf1 + (4 + 20*K + 7*K^2)*P031*Pf2 + 8*k*K*(1 + K)*(P044*Pf1 - P034*Pf2))) + ...
       K^2*(-2*P021*P042*Pf1 + 2*P021*P032*Pf2 + 4*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*(2*P041*Pf1 - 2*P031*Pf2 + k*(-3*P043*Pf1 - P044*Pf1 + 3*P033*Pf2 + P034*Pf2)) + ...
         k*(P023*((-P041)*Pf1 + 3*P042*Pf1 + (P031 - 3*P032)*Pf2) + P024*(-3*P041*Pf1 + P042*Pf1 + 3*P031*Pf2 - P032*Pf2) + P021*(P043*Pf1 + 3*P044*Pf1 - (P033 + 3*P034)*Pf2)))) + ...
     C1*K*(7 + 3*K)*(3*P021*(P042*Pf1 - P032*Pf2) + P022*(-3*P041*Pf1 + 2*k*P043*Pf1 + 3*P031*Pf2 - 2*k*P033*Pf2) + 2*k*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2))*S1 + ...
     ((-(16 + 33*K + 6*K^2))*P021*(P042*Pf1 - P032*Pf2) - 8*d1^2*k^3*K*(1 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
       4*d1^2*k^4*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + d1*k^2*(4*d1*P021*((-P042)*Pf1 + P032*Pf2) + K^2*(-8*P024*P041*Pf1 - 7*d1*P021*P042*Pf1 - 8*P023*P042*Pf1 + 8*P021*P044*Pf1 + ...
           8*P024*P031*Pf2 + 7*d1*P021*P032*Pf2 + 8*P023*P032*Pf2 - 8*P021*P034*Pf2) - 10*K*(P024*P041*Pf1 + 2*d1*P021*P042*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - 2*d1*P021*P032*Pf2 - P023*P032*Pf2 + ...
           P021*P034*Pf2)) + k*K*(2*(P024*P042*Pf1 + P021*P043*Pf1 - P024*P032*Pf2 - P021*P033*Pf2) + P023*((-2 + K)*P041*Pf1 + 2*P031*Pf2 + K*(3*P042*Pf1 - (P031 + 3*P032)*Pf2)) + ...
         K*(P024*(-3*P041*Pf1 - P042*Pf1 + 3*P031*Pf2 + P032*Pf2) + P021*((-P043)*Pf1 + 3*P044*Pf1 + P033*Pf2 - 3*P034*Pf2))) + P022*((16 + 33*K + 6*K^2 + d1^2*k^2*(4 + 20*K + 7*K^2))*P041*Pf1 - 3*k*K^2*P043*Pf1 - ...
         2*k*K*P044*Pf1 + k*K^2*P044*Pf1 - 16*P031*Pf2 - 33*K*P031*Pf2 - 6*K^2*P031*Pf2 + 3*k*K^2*P033*Pf2 + 2*k*K*P034*Pf2 - k*K^2*P034*Pf2 + 2*d1*k^2*K*(5 + 4*K)*(P043*Pf1 - P033*Pf2) - ...
         d1^2*k^2*((4 + 20*K + 7*K^2)*P031*Pf2 + 8*k*K*(1 + K)*(P044*Pf1 - P034*Pf2))))*S1^2));
         
         
         
    N5=4*(B2^3*K*(C1^2*(-9*P021*P042*Pf1 + 9*P021*P032*Pf2 - 12*d1*k^2*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + ...
       P022*((9 + 4*d1^2*k^2)*P041*Pf1 - 9*P031*Pf2 + 12*d1*k^2*(P043*Pf1 - P033*Pf2) - 4*d1^2*k^2*(2*k*P044*Pf1 + P031*Pf2 - 2*k*P034*Pf2)) + ...
       4*d1^2*k^2*((-P021)*P042*Pf1 + P021*P032*Pf2 - 2*k*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
         4*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2))) + 12*C1*k*(P024*P041*Pf1 - P023*P042*Pf1 + P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 - P022*P033*Pf2 + P021*P034*Pf2)*S1 + ...
     (P021*(P042*Pf1 - P032*Pf2) - 4*k*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       8*d1^2*k^3*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + 16*d1^2*k^4*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
       P022*(-4*k*P044*Pf1 - P041*(Pf1 + 4*d1^2*k^2*Pf1) + P031*Pf2 + 4*k*P034*Pf2 - 12*d1*k^2*(P043*Pf1 - P033*Pf2) + 4*d1^2*k^2*(2*k*P044*Pf1 + P031*Pf2 - 2*k*P034*Pf2)) + ...
       4*k^2*(d1^2*P021*(P042*Pf1 - P032*Pf2) + 3*d1*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + 4*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)))*S1^2) + ...
   B1^2*B2*(C1^2*((-(72 + 105*K + 20*K^2 + K^3))*P021*(P042*Pf1 - P032*Pf2) + 4*d1^2*k^3*(4 - 2*K + K^2)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       8*d1^2*k^4*K*(6 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + 2*k^2*(d1^2*(-4 - 10*K + K^2)*P021*(P042*Pf1 - P032*Pf2) + ...
         2*d1*(6 - K + 2*K^2)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + 2*K*(9 + 12*K + K^2)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + ...
       P022*((72 + 105*K + 20*K^2 + K^3 - 2*d1^2*k^2*(-4 - 10*K + K^2))*P041*Pf1 - (72 + 105*K + 20*K^2 + K^3)*P031*Pf2 + 2*d1*k^2*(-2*(6 - K + 2*K^2)*P043*Pf1 + (d1*(-4 - 10*K + K^2)*P031 + 2*(6 - K + 2*K^2)*P033)*Pf2) + ...
         4*d1^2*k^3*(4 - 2*K + K^2)*(P044*Pf1 - P034*Pf2) - 2*k*(9 + 12*K + K^2)*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) + ...
       2*k*(9 + 12*K + K^2)*(P024*((-(3 + K))*P041*Pf1 + P042*Pf1 + ((3 + K)*P031 - P032)*Pf2) + P023*((-P041)*Pf1 + (3 + K)*P042*Pf1 + (P031 - (3 + K)*P032)*Pf2) + ...
         P021*(P043*Pf1 + (3 + K)*P044*Pf1 - (P033 + (3 + K)*P034)*Pf2))) - 2*C1*((-(108 + 99*K + 24*K^2 + K^3))*P021*(P042*Pf1 - P032*Pf2) + ...
       4*k^2*K*(15 + 8*K + K^2)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*((108 + 99*K + 24*K^2 + K^3)*P041*Pf1 - (108 + 99*K + 24*K^2 + K^3)*P031*Pf2 - ...
         2*k*((3 + 40*K + 17*K^2 + K^3)*P043*Pf1 + (9 + 9*K + 2*K^2)*P044*Pf1 - ((3 + 40*K + 17*K^2 + K^3)*P033 + (9 + 9*K + 2*K^2)*P034)*Pf2)) - ...
       2*k*(P024*((3 + 40*K + 17*K^2 + K^3)*P041*Pf1 - (9 + 9*K + 2*K^2)*P042*Pf1 - ((3 + 40*K + 17*K^2 + K^3)*P031 - (9 + 9*K + 2*K^2)*P032)*Pf2) + ...
         P023*((9 + 9*K + 2*K^2)*P041*Pf1 - (3 + 40*K + 17*K^2 + K^3)*P042*Pf1 - ((9 + 9*K + 2*K^2)*P031 - (3 + 40*K + 17*K^2 + K^3)*P032)*Pf2) + ...
         P021*((-(9 + 9*K + 2*K^2))*P043*Pf1 - (3 + 40*K + 17*K^2 + K^3)*P044*Pf1 + ((9 + 9*K + 2*K^2)*P033 + (3 + 40*K + 17*K^2 + K^3)*P034)*Pf2)))*S1 + ...
     ((-(16 + 101*K + 32*K^2 + K^3))*P021*(P042*Pf1 - P032*Pf2) - 4*d1^2*k^3*(4 - 2*K + K^2)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
       8*d1^2*k^4*K*(6 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + k^2*(-2*d1^2*(-4 - 10*K + K^2)*P021*(P042*Pf1 - P032*Pf2) - ...
         4*d1*(6 - K + 2*K^2)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + 4*K*(1 + 8*K + K^2)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + ...
       P022*((16 + 101*K + 32*K^2 + K^3 + 2*d1^2*k^2*(-4 - 10*K + K^2))*P041*Pf1 - (16 + 101*K + 32*K^2 + K^3)*P031*Pf2 - 2*d1*k^2*(-2*(6 - K + 2*K^2)*P043*Pf1 + (d1*(-4 - 10*K + K^2)*P031 + 2*(6 - K + 2*K^2)*P033)*Pf2) - ...
         4*d1^2*k^3*(4 - 2*K + K^2)*(P044*Pf1 - P034*Pf2) - 2*k*((27 + 45*K + 15*K^2 + K^3)*P043*Pf1 + (-7 + 8*K + 3*K^2)*P044*Pf1 - ((27 + 45*K + 15*K^2 + K^3)*P033 + (-7 + 8*K + 3*K^2)*P034)*Pf2)) - ...
       2*k*(P024*((27 + 45*K + 15*K^2 + K^3)*P041*Pf1 - (-7 + 8*K + 3*K^2)*P042*Pf1 - ((27 + 45*K + 15*K^2 + K^3)*P031 + (7 - 8*K - 3*K^2)*P032)*Pf2) + ...
         P023*((-7 + 8*K + 3*K^2)*P041*Pf1 - (27 + 45*K + 15*K^2 + K^3)*P042*Pf1 + ((7 - 8*K - 3*K^2)*P031 + (27 + 45*K + 15*K^2 + K^3)*P032)*Pf2) + ...
         P021*((7 - 8*K - 3*K^2)*P043*Pf1 - (27 + 45*K + 15*K^2 + K^3)*P044*Pf1 + ((-7 + 8*K + 3*K^2)*P033 + (27 + 45*K + 15*K^2 + K^3)*P034)*Pf2)))*S1^2) - ...
   2*B1^3*(C1^2*(-2*d1*k^2*(6 + 20*K + 3*K^2)*(P024*P041*Pf1 + P023*P042*Pf1 - P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P022*P033*Pf2 + P021*P034*Pf2) + ...
       d1^2*k^2*((-(20 + 28*K + 3*K^2))*P021*(P042*Pf1 - P032*Pf2) - 2*k*(4 + 16*K + 3*K^2)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
         4*k^2*K*(4 + 3*K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*((20 + 28*K + 3*K^2)*P041*Pf1 - (20 + 28*K + 3*K^2)*P031*Pf2 - 2*k*(4 + 16*K + 3*K^2)*(P044*Pf1 - P034*Pf2))) - ...
       2*K*(3 + K)*(-2*P021*P042*Pf1 + 2*P021*P032*Pf2 + 4*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*(2*P041*Pf1 - 2*P031*Pf2 + k*(-3*P043*Pf1 - P044*Pf1 + 3*P033*Pf2 + P034*Pf2)) + ...
         k*(P023*((-P041)*Pf1 + 3*P042*Pf1 + (P031 - 3*P032)*Pf2) + P024*(-3*P041*Pf1 + P042*Pf1 + 3*P031*Pf2 - P032*Pf2) + P021*(P043*Pf1 + 3*P044*Pf1 - (P033 + 3*P034)*Pf2)))) + ...
     C1*(-9*(4 + 7*K + K^2)*P021*(P042*Pf1 - P032*Pf2) + 12*k^2*K^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
       P022*(9*(4 + 7*K + K^2)*P041*Pf1 - 9*(4 + 7*K + K^2)*P031*Pf2 - 2*k*((12 + 22*K + 5*K^2)*P043*Pf1 + 3*K*P044*Pf1 - 12*P033*Pf2 - 22*K*P033*Pf2 - 5*K^2*P033*Pf2 - 3*K*P034*Pf2)) + ...
       2*k*(-12*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2) - 5*K^2*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2) + ...
         K*(P023*(-3*P041*Pf1 + 22*P042*Pf1 + 3*P031*Pf2 - 22*P032*Pf2) + P024*(-22*P041*Pf1 + 3*P042*Pf1 + 22*P031*Pf2 - 3*P032*Pf2) + P021*(3*P043*Pf1 + 22*P044*Pf1 - 3*P033*Pf2 - 22*P034*Pf2))))*S1 + ...
     ((68 + 51*K + 4*K^2)*P021*(P042*Pf1 - P032*Pf2) + 2*d1^2*k^3*(4 + 16*K + 3*K^2)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       4*d1^2*k^4*K*(4 + 3*K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + d1*k^2*(2*(6 + 20*K + 3*K^2)*P024*(P041*Pf1 - P031*Pf2) + d1*(20 + 28*K + 3*K^2)*P021*(P042*Pf1 - P032*Pf2) + ...
         2*(6 + 20*K + 3*K^2)*(P023*P042*Pf1 - P021*P044*Pf1 - P023*P032*Pf2 + P021*P034*Pf2)) - 2*k*(4*(P024*P042*Pf1 + P021*P043*Pf1 - P024*P032*Pf2 - P021*P033*Pf2) - ...
         9*K*(P024*P041*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P021*P034*Pf2) + P023*((-4 + K^2)*P041*Pf1 + 4*P031*Pf2 + 9*K*(P042*Pf1 - P032*Pf2) + K^2*(3*P042*Pf1 - (P031 + 3*P032)*Pf2)) + ...
         K^2*(P024*(-3*P041*Pf1 - P042*Pf1 + 3*P031*Pf2 + P032*Pf2) + P021*((-P043)*Pf1 + 3*P044*Pf1 + P033*Pf2 - 3*P034*Pf2))) + P022*((-(68 + 51*K + 4*K^2 + d1^2*k^2*(20 + 28*K + 3*K^2)))*P041*Pf1 + 18*k*K*P043*Pf1 + ...
         6*k*K^2*P043*Pf1 + 8*k*P044*Pf1 - 2*k*K^2*P044*Pf1 + 68*P031*Pf2 + 51*K*P031*Pf2 + 4*K^2*P031*Pf2 - 18*k*K*P033*Pf2 - 6*k*K^2*P033*Pf2 - 8*k*P034*Pf2 + 2*k*K^2*P034*Pf2 - ...
         2*d1*k^2*(6 + 20*K + 3*K^2)*(P043*Pf1 - P033*Pf2) + d1^2*k^2*((20 + 28*K + 3*K^2)*P031*Pf2 + 2*k*(4 + 16*K + 3*K^2)*(P044*Pf1 - P034*Pf2))))*S1^2) + ...
   2*B1*B2^2*(2*C1^2*((-d1)*k^2*(12 + 16*K + 5*K^2)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) - ...
       3*(3 + K)*((2 + K)*P021*(P042*Pf1 - P032*Pf2) + k*K*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2)) +... 
       2*d1^2*k^2*(2 + K)*((-(2 + K))*P021*(P042*Pf1 - P032*Pf2) - 2*k*(1 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
         4*k^2*K*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*((2 + K)*(2*d1^2*k^2*(2 + K) + 3*(3 + K))*P041*Pf1 + d1*k^2*(12 + 16*K + 5*K^2)*(P043*Pf1 - P033*Pf2) - ...
         3*(3 + K)*((2 + K)*P031*Pf2 + k*K*(P043*Pf1 - P033*Pf2)) - 2*d1^2*k^2*(2 + K)*((2 + K)*P031*Pf2 + 2*k*(1 + K)*(P044*Pf1 - P034*Pf2)))) + ...
     C1*(24*k*(P024*P041*Pf1 - P023*P042*Pf1 + P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 - P022*P033*Pf2 + P021*P034*Pf2) - ...
       4*K*(-9*P021*P042*Pf1 + 9*P021*P032*Pf2 + 6*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + k*(P023*(-3*P041*Pf1 + 8*P042*Pf1 + 3*P031*Pf2 - 8*P032*Pf2) + ...
           P024*(-8*P041*Pf1 + 3*P042*Pf1 + 8*P031*Pf2 - 3*P032*Pf2) + P021*(3*P043*Pf1 + 8*P044*Pf1 - 3*P033*Pf2 - 8*P034*Pf2)) + P022*(9*P041*Pf1 - 9*P031*Pf2 + k*(-8*P043*Pf1 - 3*P044*Pf1 + 8*P033*Pf2 + 3*P034*Pf2))) + ...
       K^2*(7*P021*(P042*Pf1 - P032*Pf2) - 20*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + 2*k*(P024*(5*P041*Pf1 - P042*Pf1 - 5*P031*Pf2 + P032*Pf2) + ...
           P023*(P041*Pf1 - 5*P042*Pf1 - P031*Pf2 + 5*P032*Pf2) + P021*((-P043)*Pf1 - 5*P044*Pf1 + P033*Pf2 + 5*P034*Pf2)) + P022*(-7*P041*Pf1 + 7*P031*Pf2 + 2*k*(5*P043*Pf1 + P044*Pf1 - (5*P033 + P034)*Pf2))))*S1 + ...
     2*((2 + K)*P021*(P042*Pf1 - P032*Pf2) + 4*d1^2*k^3*(2 + 3*K + K^2)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       8*d1^2*k^4*K*(2 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + k^2*(2 + K)*(2*d1^2*(2 + K)*P021*(P042*Pf1 - P032*Pf2) + ...
         d1*(6 + 5*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + 8*K*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + ...
       P022*((-(2 + K))*(1 + 2*d1^2*k^2*(2 + K))*P041*Pf1 - 9*k*K*P043*Pf1 - 3*k*K^2*P043*Pf1 - 4*k*P044*Pf1 - 4*k*K*P044*Pf1 - k*K^2*P044*Pf1 + 2*P031*Pf2 + K*P031*Pf2 + 9*k*K*P033*Pf2 + 3*k*K^2*P033*Pf2 + 4*k*P034*Pf2 + ...
         4*k*K*P034*Pf2 + k*K^2*P034*Pf2 - d1*k^2*(12 + 16*K + 5*K^2)*(P043*Pf1 - P033*Pf2) + 2*d1^2*k^2*(2 + K)*((2 + K)*P031*Pf2 + 2*k*(1 + K)*(P044*Pf1 - P034*Pf2))) + ...
       k*(4*(P024*P042*Pf1 + P021*P043*Pf1 - P024*P032*Pf2 - P021*P033*Pf2) + P023*((-(2 + K)^2)*P041*Pf1 + 4*P031*Pf2 + K*(9*P042*Pf1 + 4*P031*Pf2 - 9*P032*Pf2) + K^2*(3*P042*Pf1 + P031*Pf2 - 3*P032*Pf2)) + ...
         K*(P024*(-9*P041*Pf1 + 4*P042*Pf1 + 9*P031*Pf2 - 4*P032*Pf2) + P021*(4*P043*Pf1 + 9*P044*Pf1 - 4*P033*Pf2 - 9*P034*Pf2)) + K^2*(P024*(-3*P041*Pf1 + P042*Pf1 + 3*P031*Pf2 - P032*Pf2) + ...
           P021*(P043*Pf1 + 3*P044*Pf1 - (P033 + 3*P034)*Pf2))))*S1^2));
           
           
    N6=4*(B1*B2*(C1^2*(-3*(24 + 11*K + K^2)*P021*(P042*Pf1 - P032*Pf2) - 16*d1^2*k^3*(1 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
       16*d1^2*k^4*(-1 + 2*K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) - 2*k^2*(2*d1^2*(5 + 2*K)*P021*(P042*Pf1 - P032*Pf2) + ...
         3*d1*(4 + 3*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) - 6*K*(3 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + ...
       P022*((4*d1^2*k^2*(5 + 2*K) + 3*(24 + 11*K + K^2))*P041*Pf1 - 3*(24 + 11*K + K^2)*P031*Pf2 - 2*d1*k^2*(-3*(4 + 3*K)*P043*Pf1 + (2*d1*(5 + 2*K)*P031 + 3*(4 + 3*K)*P033)*Pf2) - 16*d1^2*k^3*(1 + K)*(P044*Pf1 - P034*Pf2) - ...
         6*k*(3 + K)*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) + 6*k*(3 + K)*(P024*((-(3 + K))*P041*Pf1 + P042*Pf1 + ((3 + K)*P031 - P032)*Pf2) + ...
         P023*((-P041)*Pf1 + (3 + K)*P042*Pf1 + (P031 - (3 + K)*P032)*Pf2) + P021*(P043*Pf1 + (3 + K)*P044*Pf1 - (P033 + (3 + K)*P034)*Pf2))) + ...
     C1*((108 + 57*K + 7*K^2)*P021*(P042*Pf1 - P032*Pf2) - 4*k^2*(18 + 21*K + 5*K^2)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
       2*k*(P023*((18 + 9*K + K^2)*P041*Pf1 - 6*(5 + 7*K + K^2)*P042*Pf1 - ((18 + 9*K + K^2)*P031 - 6*(5 + 7*K + K^2)*P032)*Pf2) + P024*(6*(5 + 7*K + K^2)*P041*Pf1 - (18 + 9*K + K^2)*P042*Pf1 - ...
           (6*(5 + 7*K + K^2)*P031 - (18 + 9*K + K^2)*P032)*Pf2) + P021*((-(18 + 9*K + K^2))*P043*Pf1 - 6*(5 + 7*K + K^2)*P044*Pf1 + ((18 + 9*K + K^2)*P033 + 6*(5 + 7*K + K^2)*P034)*Pf2)) + ...
       P022*((-(108 + 57*K + 7*K^2))*P041*Pf1 + (108 + 57*K + 7*K^2)*P031*Pf2 + 2*k*(6*(5 + 7*K + K^2)*P043*Pf1 + (18 + 9*K + K^2)*P044*Pf1 - (6*(5 + 7*K + K^2)*P033 + (18 + 9*K + K^2)*P034)*Pf2)))*S1 + ...
     2*(-2*(1 + 8*K + K^2)*P021*(P042*Pf1 - P032*Pf2) + 8*d1^2*k^3*(1 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       8*d1^2*k^4*(-1 + 2*K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + k^2*(2*d1^2*(5 + 2*K)*P021*(P042*Pf1 - P032*Pf2) + ...
         3*d1*(4 + 3*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + 4*(1 + 8*K + K^2)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + ...
       k*(P023*((-(1 + 8*K + K^2))*P041*Pf1 + 3*(3 + K)^2*P042*Pf1 + ((1 + 8*K + K^2)*P031 - 3*(3 + K)^2*P032)*Pf2) + P024*(-3*(3 + K)^2*P041*Pf1 + (1 + 8*K + K^2)*P042*Pf1 + (3*(3 + K)^2*P031 - (1 + 8*K + K^2)*P032)*Pf2) + ...
         P021*((1 + 8*K + K^2)*P043*Pf1 + 3*(3 + K)^2*P044*Pf1 - ((1 + 8*K + K^2)*P033 + 3*(3 + K)^2*P034)*Pf2)) + P022*(2*(1 + 8*K + K^2 - d1^2*k^2*(5 + 2*K))*P041*Pf1 - 2*(1 + 8*K + K^2)*P031*Pf2 + ...
         d1*k^2*(-3*(4 + 3*K)*P043*Pf1 + (2*d1*(5 + 2*K)*P031 + 3*(4 + 3*K)*P033)*Pf2) + 8*d1^2*k^3*(1 + K)*(P044*Pf1 - P034*Pf2) + ...
         k*(-3*(3 + K)^2*P043*Pf1 - (1 + 8*K + K^2)*P044*Pf1 + (3*(3 + K)^2*P033 + (1 + 8*K + K^2)*P034)*Pf2)))*S1^2) + ...
   B1^2*(C1^2*(-2*(9 + 12*K + K^2)*P021*(P042*Pf1 - P032*Pf2) + 8*d1^2*k^3*(4 + 3*K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       16*d1^2*k^4*(1 + 3*K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) - k*(9 + 12*K + K^2)*(P024*(3*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 + P032*Pf2) + P023*(P041*Pf1 - 3*P042*Pf1 - P031*Pf2 + 3*P032*Pf2) + ...
         P021*((-P043)*Pf1 - 3*P044*Pf1 + P033*Pf2 + 3*P034*Pf2)) + 2*k^2*(2*d1^2*(7 + 3*K)*P021*(P042*Pf1 - P032*Pf2) + 3*d1*(8 + 5*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + ...
           P021*P034*Pf2) + 2*(9 + 12*K + K^2)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*(2*(9 + 12*K + K^2 - 2*d1^2*k^2*(7 + 3*K))*P041*Pf1 - 2*(9 + 12*K + K^2)*P031*Pf2 + ...
         2*d1*k^2*(-3*(8 + 5*K)*P043*Pf1 + (2*d1*(7 + 3*K)*P031 + 3*(8 + 5*K)*P033)*Pf2) + 8*d1^2*k^3*(4 + 3*K)*(P044*Pf1 - P034*Pf2) - k*(9 + 12*K + K^2)*(3*P043*Pf1 + P044*Pf1 - (3*P033 + P034)*Pf2))) - ...
     3*C1*((-(36 + 21*K + K^2))*P021*(P042*Pf1 - P032*Pf2) + 4*k^2*K*(5 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
       P022*((36 + 21*K + K^2)*P041*Pf1 - (36 + 21*K + K^2)*P031*Pf2 - 2*k*((13 + 11*K + K^2)*P043*Pf1 + (3 + 2*K)*P044*Pf1 - ((13 + 11*K + K^2)*P033 + (3 + 2*K)*P034)*Pf2)) - ...
       2*k*(P024*((13 + 11*K + K^2)*P041*Pf1 - (3 + 2*K)*P042*Pf1 - ((13 + 11*K + K^2)*P031 - (3 + 2*K)*P032)*Pf2) + P023*((3 + 2*K)*P041*Pf1 - (13 + 11*K + K^2)*P042*Pf1 + ((-(3 + 2*K))*P031 + (13 + 11*K + K^2)*P032)*Pf2) + ...
         P021*((-(3 + 2*K))*P043*Pf1 - (13 + 11*K + K^2)*P044*Pf1 + ((3 + 2*K)*P033 + (13 + 11*K + K^2)*P034)*Pf2)))*S1 + ...
     ((-(106 + 35*K + K^2))*P021*(P042*Pf1 - P032*Pf2) - 8*d1^2*k^3*(4 + 3*K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
       16*d1^2*k^4*(1 + 3*K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) - 2*k^2*(2*d1^2*(7 + 3*K)*P021*(P042*Pf1 - P032*Pf2) + ...
         3*d1*(8 + 5*K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) - 2*(-1 + K + 2*K^2)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + ...
       P022*((106 + 35*K + K^2 + 4*d1^2*k^2*(7 + 3*K))*P041*Pf1 - (106 + 35*K + K^2)*P031*Pf2 - 2*d1*k^2*(-3*(8 + 5*K)*P043*Pf1 + (2*d1*(7 + 3*K)*P031 + 3*(8 + 5*K)*P033)*Pf2) - 8*d1^2*k^3*(4 + 3*K)*(P044*Pf1 - P034*Pf2) - ...
         k*(3*(9 + 12*K + K^2)*P043*Pf1 - (-17 + 2*K + K^2)*P044*Pf1 - (3*(9 + 12*K + K^2)*P033 - (-17 + 2*K + K^2)*P034)*Pf2)) + ...
       k*(P024*(-3*(9 + 12*K + K^2)*P041*Pf1 - (-17 + 2*K + K^2)*P042*Pf1 + (3*(9 + 12*K + K^2)*P031 + (-17 + 2*K + K^2)*P032)*Pf2) + P023*((-17 + 2*K + K^2)*P041*Pf1 + 3*(9 + 12*K + K^2)*P042*Pf1 - ...
           ((-17 + 2*K + K^2)*P031 + 3*(9 + 12*K + K^2)*P032)*Pf2) + P021*((-(-17 + 2*K + K^2))*P043*Pf1 + 3*(9 + 12*K + K^2)*P044*Pf1 + ((-17 + 2*K + K^2)*P033 - 3*(9 + 12*K + K^2)*P034)*Pf2)))*S1^2) + ...
   B2^2*(C1^2*(-12*d1*k^2*(2 + K)*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) - ...
       9*((2 + K)*P021*(P042*Pf1 - P032*Pf2) + k*K*(P024*P041*Pf1 - P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 + P021*P034*Pf2)) + ...
       4*d1^2*k^2*(2 + K)*((-P021)*P042*Pf1 + P021*P032*Pf2 - 2*k*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
         4*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*((9 + 4*d1^2*k^2)*(2 + K)*P041*Pf1 + 12*d1*k^2*(2 + K)*(P043*Pf1 - P033*Pf2) - 4*d1^2*k^2*(2 + K)*(2*k*P044*Pf1 + P031*Pf2 - 2*k*P034*Pf2) - ...
         9*((2 + K)*P031*Pf2 + k*K*(P043*Pf1 - P033*Pf2)))) - 6*C1*(-4*k*(P024*P041*Pf1 - P023*P042*Pf1 + P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 + P023*P032*Pf2 - P022*P033*Pf2 + P021*P034*Pf2) + ...
       K*(-2*P021*P042*Pf1 + 2*P021*P032*Pf2 + 4*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*(2*P041*Pf1 - 2*P031*Pf2 + k*(-2*P043*Pf1 - P044*Pf1 + 2*P033*Pf2 + P034*Pf2)) + ...
         k*(P023*((-P041)*Pf1 + 2*P042*Pf1 + (P031 - 2*P032)*Pf2) + P024*(-2*P041*Pf1 + P042*Pf1 + 2*P031*Pf2 - P032*Pf2) + P021*(P043*Pf1 + 2*P044*Pf1 - (P033 + 2*P034)*Pf2))))*S1 + ...
     ((2 + K)*P021*(P042*Pf1 - P032*Pf2) + 8*d1^2*k^3*(2 + K)*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       16*d1^2*k^4*(2 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*((-(1 + 4*d1^2*k^2))*(2 + K)*P041*Pf1 - 9*k*K*P043*Pf1 - 8*k*P044*Pf1 - 4*k*K*P044*Pf1 + 2*P031*Pf2 + K*P031*Pf2 + ...
         9*k*K*P033*Pf2 + 8*k*P034*Pf2 + 4*k*K*P034*Pf2 - 12*d1*k^2*(2 + K)*(P043*Pf1 - P033*Pf2) + 4*d1^2*k^2*(2 + K)*(2*k*P044*Pf1 + P031*Pf2 - 2*k*P034*Pf2)) + ...
       4*k^2*(2 + K)*(d1^2*P021*(P042*Pf1 - P032*Pf2) + 3*d1*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + 4*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + ...
       k*(P023*(-4*(2 + K)*P041*Pf1 + 9*K*P042*Pf1 + 8*P031*Pf2 + 4*K*P031*Pf2 - 9*K*P032*Pf2) + 8*(P024*P042*Pf1 + P021*P043*Pf1 - P024*P032*Pf2 - P021*P033*Pf2) + ...
         K*(P024*(-9*P041*Pf1 + 4*P042*Pf1 + 9*P031*Pf2 - 4*P032*Pf2) + P021*(4*P043*Pf1 + 9*P044*Pf1 - 4*P033*Pf2 - 9*P034*Pf2))))*S1^2));
         
         
  N7=-3*(C1 - S1)*(2*B1*(2*C1*(2*(3 + K)*P021*(P042*Pf1 - P032*Pf2) - 4*d1^2*k^3*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
       8*d1^2*k^4*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + k*(3 + K)*(P024*(3*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 + P032*Pf2) + P023*(P041*Pf1 - 3*P042*Pf1 - P031*Pf2 + 3*P032*Pf2) + ...
         P021*((-P043)*Pf1 - 3*P044*Pf1 + P033*Pf2 + 3*P034*Pf2)) - 2*k^2*(d1^2*P021*(P042*Pf1 - P032*Pf2) + 3*d1*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P021*P034*Pf2) + ...
         2*(3 + K)*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + P022*(2*(-3 + d1^2*k^2 - K)*P041*Pf1 + 2*(3 + K)*P031*Pf2 - 2*d1*k^2*(-3*P043*Pf1 + d1*P031*Pf2 + 3*P033*Pf2) + ...
         4*d1^2*k^3*((-P044)*Pf1 + P034*Pf2) + k*(3 + K)*(3*P043*Pf1 + P044*Pf1 - (3*P033 + P034)*Pf2))) + ...
     (-3*(8 + K)*P021*(P042*Pf1 - P032*Pf2) - 8*d1^2*k^3*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) - ...
       16*d1^2*k^4*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) - 4*k^2*(d1^2*P021*(P042*Pf1 - P032*Pf2) + 3*d1*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + ...
           P021*P034*Pf2) + 3*K*((-P024)*P043*Pf1 + P023*P044*Pf1 + P024*P033*Pf2 - P023*P034*Pf2)) + P022*((4*d1^2*k^2 + 3*(8 + K))*P041*Pf1 - 3*(8 + K)*P031*Pf2 - 4*d1*k^2*(-3*P043*Pf1 + d1*P031*Pf2 + 3*P033*Pf2) - ...
         8*d1^2*k^3*(P044*Pf1 - P034*Pf2) - 6*k*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) - 6*k*(P024*((3 + K)*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 - K*P031*Pf2 + P032*Pf2) + ...
         P023*(P041*Pf1 - (3 + K)*P042*Pf1 + (-P031 + (3 + K)*P032)*Pf2) + P021*((-P043)*Pf1 - (3 + K)*P044*Pf1 + (P033 + (3 + K)*P034)*Pf2)))*S1) + ...
   B2*(C1*(3*(8 + K)*P021*(P042*Pf1 - P032*Pf2) + 16*d1^2*k^3*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + ...
       32*d1^2*k^4*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + 4*k^2*(2*d1^2*P021*(P042*Pf1 - P032*Pf2) + 6*d1*(P024*P041*Pf1 + P023*P042*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + ...
           P021*P034*Pf2) + 3*K*((-P024)*P043*Pf1 + P023*P044*Pf1 + P024*P033*Pf2 - P023*P034*Pf2)) + P022*((-(8*d1^2*k^2 + 3*(8 + K)))*P041*Pf1 + 3*(8 + K)*P031*Pf2 + 8*d1*k^2*(-3*P043*Pf1 + d1*P031*Pf2 + 3*P033*Pf2) + ...
         16*d1^2*k^3*(P044*Pf1 - P034*Pf2) + 6*k*((3 + K)*P043*Pf1 + P044*Pf1 - ((3 + K)*P033 + P034)*Pf2)) + 6*k*(P024*((3 + K)*P041*Pf1 - P042*Pf1 - 3*P031*Pf2 - K*P031*Pf2 + P032*Pf2) + ...
         P023*(P041*Pf1 - (3 + K)*P042*Pf1 + (-P031 + (3 + K)*P032)*Pf2) + P021*((-P043)*Pf1 - (3 + K)*P044*Pf1 + (P033 + (3 + K)*P034)*Pf2))) + ...
     (24*d1*k^2*(P024*P041*Pf1 + P023*P042*Pf1 - P022*P043*Pf1 - P021*P044*Pf1 - P024*P031*Pf2 - P023*P032*Pf2 + P022*P033*Pf2 + P021*P034*Pf2) + ...
       6*k*(P021*P043*Pf1 - 3*P022*P043*Pf1 + 3*P021*P044*Pf1 - P022*P044*Pf1 - P021*P033*Pf2 + 3*P022*P033*Pf2 - 3*P021*P034*Pf2 + P022*P034*Pf2 + ...
         P024*(-3*P041*Pf1 + P042*Pf1 + 8*k*P043*Pf1 + 3*P031*Pf2 - P032*Pf2 - 8*k*P033*Pf2) + P023*((-P041)*Pf1 + 3*P042*Pf1 - 8*k*P044*Pf1 + P031*Pf2 - 3*P032*Pf2 + 8*k*P034*Pf2)) - ...
       8*d1^2*k^2*((-P021)*P042*Pf1 + P021*P032*Pf2 - 2*k*(P023*P041*Pf1 - P024*P042*Pf1 - P021*P043*Pf1 - P023*P031*Pf2 + P024*P032*Pf2 + P021*P033*Pf2) + P022*(P041*Pf1 - 2*k*P044*Pf1 - P031*Pf2 + 2*k*P034*Pf2) - ...
         4*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2)) + K*(-5*P021*P042*Pf1 + 5*P021*P032*Pf2 + 4*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + ...
         k*(P023*(-4*P041*Pf1 + 6*P042*Pf1 + 4*P031*Pf2 - 6*P032*Pf2) + P024*(-6*P041*Pf1 + 4*P042*Pf1 + 6*P031*Pf2 - 4*P032*Pf2) + 2*P021*(2*P043*Pf1 + 3*P044*Pf1 - 2*P033*Pf2 - 3*P034*Pf2)) + ...
         P022*(5*P041*Pf1 - 5*P031*Pf2 + k*(-6*P043*Pf1 - 4*P044*Pf1 + 6*P033*Pf2 + 4*P034*Pf2))))*S1));
         
         
   N8=9*(-2*P021*P042*Pf1 + 2*P021*P032*Pf2 + 4*k^2*(P024*P043*Pf1 - P023*P044*Pf1 - P024*P033*Pf2 + P023*P034*Pf2) + P022*(2*P041*Pf1 - 2*P031*Pf2 + k*(-3*P043*Pf1 - P044*Pf1 + 3*P033*Pf2 + P034*Pf2)) + ...
   k*(P023*((-P041)*Pf1 + 3*P042*Pf1 + (P031 - 3*P032)*Pf2) + P024*(-3*P041*Pf1 + P042*Pf1 + 3*P031*Pf2 - P032*Pf2) + P021*(P043*Pf1 + 3*P044*Pf1 - (P033 + 3*P034)*Pf2)))*(C1 - S1)^2;
   
   function [D1,D2,D3,D4,D5,D6,D7,D8] = Denom_2visc(B1,B2,K,k,d1,P0,u);

P011=P0(1,1);P012=P0(1,2);P013=P0(1,3);P014=P0(1,4);
P021=P0(2,1);P022=P0(2,2);P023=P0(2,3);P024=P0(2,4);
P031=P0(3,1);P032=P0(3,2);P033=P0(3,3);P034=P0(3,4);
P041=P0(4,1);P042=P0(4,2);P043=P0(4,3);P044=P0(4,4);


C1=cosh(k*d1);S1=sinh(k*d1);


D1=64*B1^4*B2*K^3*(P032*P041 - P031*P042)*(-2*B1*B2*C1*S1 + B2^2*(C1^2*(1 + d1^2*k^2) - d1^2*k^2*S1^2) + B1^2*((-C1^2)*d1^2*k^2 + (1 + d1^2*k^2)*S1^2));

D2=64*B1^3*K^2*((-B1^3)*(P032*P041 - P031*P042)*(C1^2*d1^2*k^2 - (1 + d1^2*k^2)*S1^2) + ...
   B1*B2^2*(C1^2*((-(2 + K))*P031*P042 - d1^2*k^2*(2 + K)*P031*P042 + P032*((1 + d1^2*k^2)*(2 + K)*P041 - k*K*P043) + k*K*((-P034)*P041 + P033*P042 + P031*P044)) - C1*(7 + 3*K)*(P032*P041 - P031*P042)*S1 + ...
     k*((-d1^2)*k*(2 + K)*(P032*P041 - P031*P042) + K*((-P034)*P041 + P033*P042 - P032*P043 + P031*P044))*S1^2) + ...
   B1^2*B2*(C1^2*d1*k^2*(K*(P034*P041 + P033*P042 - P032*P043 - P031*P044) + d1*((3 + 2*K)*P031*P042 + k*K*(P033*P041 - P034*P042 - P031*P043) + P032*((-(3 + 2*K))*P041 + k*K*P044))) + ...
     C1*((3 + K)*P031*P042 + P032*((-(3 + K))*P041 + k*K*P043) + k*K*(P034*P041 - P033*P042 - P031*P044))*S1 + (-2*(2 + K)*P031*P042 - d1^2*k^2*((3 + 2*K)*P031*P042 + k*K*(P033*P041 - P034*P042 - P031*P043)) - ...
       d1*k^2*K*(P034*P041 + P033*P042 - P031*P044) + P032*((2*(2 + K) + d1^2*k^2*(3 + 2*K))*P041 + d1*k^2*K*(P043 - d1*k*P044)))*S1^2) + ...
   B2^3*(C1^2*((-(3 + K))*P031*P042 - d1^2*k^2*((2 + K)*P031*P042 + k*K*(P033*P041 - P034*P042 - P031*P043)) - d1*k^2*K*(P034*P041 + P033*P042 - P031*P044) + ...
       P032*((3 + K + d1^2*k^2*(2 + K))*P041 + d1*k^2*K*(P043 - d1*k*P044))) + C1*k*K*(P034*P041 - P033*P042 + P032*P043 - P031*P044)*S1 + ...
     d1*k^2*(K*(P034*P041 + P033*P042 - P032*P043 - P031*P044) + d1*((2 + K)*P031*P042 + k*K*(P033*P041 - P034*P042 - P031*P043) + P032*((-(2 + K))*P041 + k*K*P044)))*S1^2));
     
D3=-16*B1^2*K*(-2*B1^3*(C1^2*d1*k^2*(2*K*(P034*P041 + P033*P042 - P032*P043 - P031*P044) + d1*((4 + 5*K)*P031*P042 + 2*k*K*(P033*P041 - P034*P042 - P031*P043) + P032*((-(4 + 5*K))*P041 + 2*k*K*P044))) + ...
     C1*K*(-3*P032*P041 + 2*k*P034*P041 + 3*P031*P042 - 2*k*P033*P042 + 2*k*P032*P043 - 2*k*P031*P044)*S1 + (-4*(2 + K)*P031*P042 - d1^2*k^2*((4 + 5*K)*P031*P042 + 2*k*K*(P033*P041 - P034*P042 - P031*P043)) - ...
       2*d1*k^2*K*(P034*P041 + P033*P042 - P031*P044) + P032*((4*(2 + K) + d1^2*k^2*(4 + 5*K))*P041 + 2*d1*k^2*K*(P043 - d1*k*P044)))*S1^2) - ...
   2*B1*B2^2*(2*C1^2*((-d1^2)*k^2*(2 + K)*((2 + K)*P031*P042 + k*K*(P033*P041 - P034*P042 - P031*P043)) - d1*k^2*K*(2 + K)*(P034*P041 + P033*P042 - P031*P044) + ...
       P032*((2 + K)*(3 + K + d1^2*k^2*(2 + K))*P041 - k*K*((3 + K - d1*k*(2 + K))*P043 + d1^2*k^2*(2 + K)*P044)) - (3 + K)*((2 + K)*P031*P042 + k*K*(P034*P041 - P033*P042 - P031*P044))) + ...
     C1*(3*(4 + 7*K + K^2)*P031*P042 + 4*k^2*K^2*((-P034)*P043 + P033*P044) + P032*(-3*(4 + 7*K + K^2)*P041 + 2*k*K*((2 + K)*P043 + P044)) - ...
       2*k*K*(P034*((-(2 + K))*P041 + P042) + P033*(-P041 + (2 + K)*P042) + P031*(P043 + (2 + K)*P044)))*S1 + 2*k*(d1*k*K*(2 + K)*(P034*P041 + P033*P042 - P032*P043 - P031*P044) - ...
       K*(3 + K)*(P034*P041 - P033*P042 + P032*P043 - P031*P044) + d1^2*k*(2 + K)*((2 + K)*P031*P042 + k*K*(P033*P041 - P034*P042 - P031*P043) + P032*((-(2 + K))*P041 + k*K*P044)))*S1^2) + ...
   B2^3*(C1^2*((9 + 12*K + K^2)*P031*P042 + 2*d1*k^2*K*(5 + K)*(P034*P041 + P033*P042 - P031*P044) - P032*((9 + 12*K + K^2 + d1^2*k^2*(4 + 8*K + K^2))*P041 + 2*d1*k^2*K*((5 + K)*P043 - d1*k*(4 + K)*P044)) + ...
       d1^2*k^2*((4 + 8*K + K^2)*P031*P042 + 2*k*K*(4 + K)*(P033*P041 - P034*P042 - P031*P043) + 4*k^2*K^2*(P034*P043 - P033*P044))) - 2*C1*k*K*(5 + K)*(P034*P041 - P033*P042 + P032*P043 - P031*P044)*S1 + ...
     ((-P031)*P042 + 2*k*K*(P033*P041 - P034*P042 - P031*P043) - 2*d1^2*k^3*K*(4 + K)*(P033*P041 - P034*P042 - P031*P043) + 4*d1^2*k^4*K^2*((-P034)*P043 + P033*P044) + ...
       P032*((1 + d1^2*k^2*(4 + 8*K + K^2))*P041 + 2*k*K*(d1*k*(5 + K)*P043 + P044 - d1^2*k^2*(4 + K)*P044)) - k^2*(d1^2*(4 + 8*K + K^2)*P031*P042 + 2*d1*K*(5 + K)*(P034*P041 + P033*P042 - P031*P044) + ...
         4*K^2*(P034*P043 - P033*P044)))*S1^2) + ...
   B1^2*B2*(C1^2*(-2*d1*k^2*K*(7 + 3*K)*(P034*P041 + P033*P042 - P032*P043 - P031*P044) + d1^2*k^2*((-(12 + 14*K + 5*K^2))*P031*P042 - 6*k*K*(2 + K)*(P033*P041 - P034*P042 - P031*P043) + ...
         P032*((12 + 14*K + 5*K^2)*P041 - 6*k*K*(2 + K)*P044) + 4*k^2*K^2*((-P034)*P043 + P033*P044)) + K*((8 + K)*P031*P042 + k^2*K*(-4*P034*P043 + 4*P033*P044) + P032*((-(8 + K))*P041 + 2*k*((3 + K)*P043 + P044)) + ...
         2*k*(P034*((3 + K)*P041 - P042) + P033*(P041 - (3 + K)*P042) - P031*(P043 + (3 + K)*P044)))) + 2*C1*(7 + 3*K)*((-(3 + K))*P031*P042 + P032*((3 + K)*P041 - k*K*P043) + k*K*((-P034)*P041 + P033*P042 + P031*P044))*S1 + ...
     (2*d1*k^2*K*(7 + 3*K)*(P034*P041 + P033*P042 - P031*P044) - P032*((18 + 32*K + 6*K^2 + d1^2*k^2*(12 + 14*K + 5*K^2))*P041 - 2*k*K*((3 + K - d1*k*(7 + 3*K))*P043 + 3*d1^2*k^2*(2 + K)*P044)) + ...
       2*((9 + 16*K + 3*K^2)*P031*P042 + k*K*(3 + K)*(P034*P041 - P033*P042 - P031*P044)) + d1^2*k^2*((12 + 14*K + 5*K^2)*P031*P042 + 6*k*K*(2 + K)*(P033*P041 - P034*P042 - P031*P043) + 4*k^2*K^2*(P034*P043 - P033*P044)))*S1^2));
       
       
 D4=-16*B1*(B1^2*B2*(C1^2*((-d1)*k^2*K*(16 + 11*K + 2*K^2)*(P034*P041 + P033*P042 - P032*P043 - P031*P044) + d1^2*k^2*((-(4 + 4*K + 5*K^2 + K^3))*P031*P042 - 2*k*K*(6 + 4*K + K^2)*(P033*P041 - P034*P042 - P031*P043) + ...
         P032*((4 + 4*K + 5*K^2 + K^3)*P041 - 2*k*K*(6 + 4*K + K^2)*P044) - 4*k^2*K^2*(3 + K)*(P034*P043 - P033*P044)) - K*(3 + K)*((-(8 + K))*P031*P042 + 4*k^2*K*(P034*P043 - P033*P044) + ...
         P032*((8 + K)*P041 - 2*k*((3 + K)*P043 + P044)) + 2*k*(P034*((-(3 + K))*P041 + P042) + P033*(-P041 + (3 + K)*P042) + P031*(P043 + (3 + K)*P044)))) + ...
     C1*(-3*(12 + 25*K + 10*K^2 + K^3)*P031*P042 + 4*k^2*K^2*(3 + K)*(P034*P043 - P033*P044) + P032*(3*(12 + 25*K + 10*K^2 + K^3)*P041 - k*K*((14 + 29*K + 4*K^2)*P043 + 2*(3 + K)*P044)) + ...
       k*K*(P034*((-(14 + 29*K + 4*K^2))*P041 + 2*(3 + K)*P042) + P033*(-2*(3 + K)*P041 + (14 + 29*K + 4*K^2)*P042) + P031*(2*(3 + K)*P043 + (14 + 29*K + 4*K^2)*P044)))*S1 + ...
     ((4 + 35*K + 24*K^2 + 2*K^3)*P031*P042 + 2*d1^2*k^3*K*(6 + 4*K + K^2)*(P033*P041 - P034*P042 - P031*P043) + 4*d1^2*k^4*K^2*(3 + K)*(P034*P043 - P033*P044) - ...
       k*K*((-P034)*(2*(3 + K)^2*P041 - (-2 + K)*P042) + P033*((-(-2 + K))*P041 + 2*(3 + K)^2*P042) + P031*((-2 + K)*P043 + 2*(3 + K)^2*P044)) - ...
       P032*((4 + 35*K + 24*K^2 + 2*K^3 + d1^2*k^2*(4 + 4*K + 5*K^2 + K^3))*P041 - k*K*((2*(3 + K)^2 - d1*k*(16 + 11*K + 2*K^2))*P043 + (-2 + K + 2*d1^2*k^2*(6 + 4*K + K^2))*P044)) + ...
       d1*k^2*(4*d1*P031*P042 + K^2*(11*P034*P041 + 5*d1*P031*P042 + 11*P033*P042 - 11*P031*P044) + 4*K*(4*P034*P041 + d1*P031*P042 + 4*P033*P042 - 4*P031*P044) + K^3*(2*P034*P041 + d1*P031*P042 + 2*P033*P042 - 2*P031*P044)))*...
      S1^2) + B1^3*(C1^2*(-2*d1*k^2*K*(5 + 4*K)*(P034*P041 + P033*P042 - P032*P043 - P031*P044) + d1^2*k^2*((-(4 + 20*K + 7*K^2))*P031*P042 - 8*k*K*(1 + K)*(P033*P041 - P034*P042 - P031*P043) + ...
         P032*((4 + 20*K + 7*K^2)*P041 - 8*k*K*(1 + K)*P044) + 4*k^2*K^2*((-P034)*P043 + P033*P044)) + K^2*(2*P031*P042 + k*(P033*P041 + 3*P034*P041 - 3*P033*P042 - P034*P042 - P031*P043 - 3*P031*P044) + ...
         k^2*(-4*P034*P043 + 4*P033*P044) + P032*(-2*P041 + k*(3*P043 + P044)))) + C1*K*(7 + 3*K)*(-3*P031*P042 + P032*(3*P041 - 2*k*P043) + 2*k*((-P034)*P041 + P033*P042 + P031*P044))*S1 + ...
     ((16 + 33*K + 6*K^2)*P031*P042 + 8*d1^2*k^3*K*(1 + K)*(P033*P041 - P034*P042 - P031*P043) + 4*d1^2*k^4*K^2*(P034*P043 - P033*P044) - ...
       P032*((16 + 33*K + 6*K^2 + d1^2*k^2*(4 + 20*K + 7*K^2))*P041 + k*K*(-3*K*P043 + 2*d1*k*(5 + 4*K)*P043 - 2*P044 + K*P044 - 8*d1^2*k^2*(1 + K)*P044)) + ...
       k*K*((-P033)*((-2 + K)*P041 + 3*K*P042) - 2*(P034*P042 + P031*P043) + K*(3*P034*P041 + P034*P042 + P031*P043 - 3*P031*P044)) + ...
       d1*k^2*(4*d1*P031*P042 + K^2*(8*P034*P041 + 7*d1*P031*P042 + 8*P033*P042 - 8*P031*P044) + 10*K*(P034*P041 + 2*d1*P031*P042 + P033*P042 - P031*P044)))*S1^2) + ...
   B2^3*K*(C1^2*(3*(3 + K)*P031*P042 + d1*k^2*(6 + 5*K)*(P034*P041 + P033*P042 - P031*P044) - P032*((2*d1^2*k^2*(2 + K) + 3*(3 + K))*P041 + d1*k^2*((6 + 5*K)*P043 - 4*d1*k*(1 + K)*P044)) + ...
       2*d1^2*k^2*((2 + K)*P031*P042 + 2*k*(1 + K)*(P033*P041 - P034*P042 - P031*P043) + 4*k^2*K*(P034*P043 - P033*P044))) - C1*k*(6 + 5*K)*(P034*P041 - P033*P042 + P032*P043 - P031*P044)*S1 +... 
     ((-P031)*P042 - 4*d1^2*k^3*(1 + K)*(P033*P041 - P034*P042 - P031*P043) + k*(2 + K)*(P033*P041 - P034*P042 - P031*P043) + 8*d1^2*k^4*K*((-P034)*P043 + P033*P044) + ...
       P032*((1 + 2*d1^2*k^2*(2 + K))*P041 + k*(d1*k*(6 + 5*K)*P043 - 4*d1^2*k^2*(1 + K)*P044 + (2 + K)*P044)) - k^2*(2*d1^2*(2 + K)*P031*P042 + d1*(6 + 5*K)*(P034*P041 + P033*P042 - P031*P044) + 8*K*(P034*P043 - P033*P044)))*...
      S1^2) + B1*B2^2*(C1^2*(2*d1*k^2*K*(10 + 7*K + K^2)*(P034*P041 + P033*P042 - P031*P044) - P032*((2 + K)*(9 + 12*K + K^2 + d1^2*k^2*(4 + 8*K + K^2))*P041 - ...
         k*K*((9 + 12*K + K^2 - 2*d1*k*(10 + 7*K + K^2))*P043 + 2*d1^2*k^2*(8 + 6*K + K^2)*P044)) + (9 + 12*K + K^2)*((2 + K)*P031*P042 + k*K*(P034*P041 - P033*P042 - P031*P044)) - ...
       d1^2*k^2*(2 + K)*((-(4 + 8*K + K^2))*P031*P042 - 2*k*K*(4 + K)*(P033*P041 - P034*P042 - P031*P043) + 4*k^2*K^2*((-P034)*P043 + P033*P044))) + ...
     C1*K*((-(36 + 21*K + K^2))*P031*P042 + 4*k^2*K*(5 + K)*(P034*P043 - P033*P044) + P032*((36 + 21*K + K^2)*P041 - 2*k*((10 + 7*K + K^2)*P043 + (3 + 2*K)*P044)) + ...
       2*k*((-P034)*((10 + 7*K + K^2)*P041 - (3 + 2*K)*P042) + P033*((-(3 + 2*K))*P041 + (10 + 7*K + K^2)*P042) + P031*((3 + 2*K)*P043 + (10 + 7*K + K^2)*P044)))*S1 + ...
     ((-(2 + K))*P031*P042 - 2*d1^2*k^3*K*(8 + 6*K + K^2)*(P033*P041 - P034*P042 - P031*P043) - 4*d1^2*k^4*K^2*(2 + K)*(P034*P043 - P033*P044) - ...
       k*K*((-P034)*((9 + 12*K + K^2)*P041 - 2*(2 + K)*P042) + P033*(-2*(2 + K)*P041 + (9 + 12*K + K^2)*P042) + P031*(2*(2 + K)*P043 + (9 + 12*K + K^2)*P044)) + ...
       P032*((2 + K)*(1 + d1^2*k^2*(4 + 8*K + K^2))*P041 + k*K*((9 + 12*K + K^2 + 2*d1*k*(10 + 7*K + K^2))*P043 - 2*(2 + K)*(-1 + d1^2*k^2*(4 + K))*P044)) - ...
       k^2*(2 + K)*(d1^2*(4 + 8*K + K^2)*P031*P042 + 2*d1*K*(5 + K)*(P034*P041 + P033*P042 - P031*P044) + 4*K^2*(P034*P043 - P033*P044)))*S1^2));
       
       
D5=-4*(B2^3*K*(C1^2*(9*P031*P042 + 12*d1*k^2*(P034*P041 + P033*P042 - P031*P044) - P032*((9 + 4*d1^2*k^2)*P041 + 4*d1*k^2*(3*P043 - 2*d1*k*P044)) - ...
       4*d1^2*k^2*((-P031)*P042 + 2*k*((-P033)*P041 + P034*P042 + P031*P043) + k^2*(-4*P034*P043 + 4*P033*P044))) - 12*C1*k*(P034*P041 - P033*P042 + P032*P043 - P031*P044)*S1 + ...
     ((-P031)*P042 + 4*k*(P033*P041 - P034*P042 - P031*P043) + 8*d1^2*k^3*((-P033)*P041 + P034*P042 + P031*P043) - 16*d1^2*k^4*(P034*P043 - P033*P044) + ...
       P032*(P041 + 4*d1^2*k^2*P041 + 4*k*(3*d1*k*P043 + P044 - 2*d1^2*k^2*P044)) - 4*k^2*(d1^2*P031*P042 + 4*P034*P043 - 4*P033*P044 + 3*d1*(P034*P041 + P033*P042 - P031*P044)))*S1^2) + ...
   2*B1^3*(C1^2*(-2*d1*k^2*(6 + 20*K + 3*K^2)*(P034*P041 + P033*P042 - P032*P043 - P031*P044) + d1^2*k^2*((-(20 + 28*K + 3*K^2))*P031*P042 - 2*k*(4 + 16*K + 3*K^2)*(P033*P041 - P034*P042 - P031*P043) + ...
         P032*((20 + 28*K + 3*K^2)*P041 - 2*k*(4 + 16*K + 3*K^2)*P044) - 4*k^2*K*(4 + 3*K)*(P034*P043 - P033*P044)) + 2*K*(3 + K)*(2*P031*P042 + k*(P033*P041 + 3*P034*P041 - 3*P033*P042 - P034*P042 - P031*P043 - 3*P031*P044) + ...
         k^2*(-4*P034*P043 + 4*P033*P044) + P032*(-2*P041 + k*(3*P043 + P044)))) + C1*(-9*(4 + 7*K + K^2)*P031*P042 + 12*k^2*K^2*(P034*P043 - P033*P044) + ...
       P032*(9*(4 + 7*K + K^2)*P041 - 2*k*((12 + 22*K + 5*K^2)*P043 + 3*K*P044)) + 2*k*(12*((-P034)*P041 + P033*P042 + P031*P044) + 5*K^2*((-P034)*P041 + P033*P042 + P031*P044) + ...
         K*(-3*P033*P041 - 22*P034*P041 + 22*P033*P042 + 3*P034*P042 + 3*P031*P043 + 22*P031*P044)))*S1 + ((68 + 51*K + 4*K^2)*P031*P042 + 2*d1^2*k^3*(4 + 16*K + 3*K^2)*(P033*P041 - P034*P042 - P031*P043) + ...
       4*d1^2*k^4*K*(4 + 3*K)*(P034*P043 - P033*P044) - P032*((68 + 51*K + 4*K^2 + d1^2*k^2*(20 + 28*K + 3*K^2))*P041 - 2*k*(9*K*P043 - d1*k*(6 + 20*K + 3*K^2)*P043 + K^2*(3*P043 - P044) + 4*P044 + ...
           d1^2*k^2*(4 + 16*K + 3*K^2)*P044)) + d1*k^2*(2*(6 + 20*K + 3*K^2)*P034*P041 + d1*(20 + 28*K + 3*K^2)*P031*P042 + 2*(6 + 20*K + 3*K^2)*(P033*P042 - P031*P044)) - ...
       2*k*(P033*((-4 + K^2)*P041 + 3*K*(3 + K)*P042) + 4*(P034*P042 + P031*P043) - K^2*(3*P034*P041 + P034*P042 + P031*P043 - 3*P031*P044) + K*(-9*P034*P041 + 9*P031*P044)))*S1^2) + ...
   B1^2*B2*(C1^2*((72 + 105*K + 20*K^2 + K^3)*P031*P042 - 4*d1^2*k^3*(4 - 2*K + K^2)*(P033*P041 - P034*P042 - P031*P043) - 8*d1^2*k^4*K*(6 + K)*(P034*P043 - P033*P044) - ...
       2*k*(9 + 12*K + K^2)*(P034*((-(3 + K))*P041 + P042) + P033*(-P041 + (3 + K)*P042) + P031*(P043 + (3 + K)*P044)) + P032*((-72 - 105*K - 20*K^2 - K^3 + 2*d1^2*k^2*(-4 - 10*K + K^2))*P041 + ...
         2*k*((27 + 45*K + 15*K^2 + K^3 + 2*d1*k*(6 - K + 2*K^2))*P043 + (9 + 12*K + K^2 - 2*d1^2*k^2*(4 - 2*K + K^2))*P044)) + ...
       k^2*(-2*d1^2*(-4 - 10*K + K^2)*P031*P042 - 4*d1*(6 - K + 2*K^2)*(P034*P041 + P033*P042 - P031*P044) - 4*K*(9 + 12*K + K^2)*(P034*P043 - P033*P044))) + ...
     2*C1*((-(108 + 99*K + 24*K^2 + K^3))*P031*P042 + 4*k^2*K*(15 + 8*K + K^2)*(P034*P043 - P033*P044) + P032*((108 + 99*K + 24*K^2 + K^3)*P041 - 2*k*((3 + 40*K + 17*K^2 + K^3)*P043 + (9 + 9*K + 2*K^2)*P044)) + ...
       2*k*((-P034)*((3 + 40*K + 17*K^2 + K^3)*P041 - (9 + 9*K + 2*K^2)*P042) + P033*((-(9 + 9*K + 2*K^2))*P041 + (3 + 40*K + 17*K^2 + K^3)*P042) + P031*((9 + 9*K + 2*K^2)*P043 + (3 + 40*K + 17*K^2 + K^3)*P044)))*S1 + ...
     ((16 + 101*K + 32*K^2 + K^3)*P031*P042 + 4*d1^2*k^3*(4 - 2*K + K^2)*(P033*P041 - P034*P042 - P031*P043) + 8*d1^2*k^4*K*(6 + K)*(P034*P043 - P033*P044) + ...
       2*k*(P034*((27 + 45*K + 15*K^2 + K^3)*P041 + (7 - 8*K - 3*K^2)*P042) + P033*((-7 + 8*K + 3*K^2)*P041 - (27 + 45*K + 15*K^2 + K^3)*P042) - P031*((-7 + 8*K + 3*K^2)*P043 + (27 + 45*K + 15*K^2 + K^3)*P044)) + ...
       P032*((-(16 + 101*K + 32*K^2 + K^3 + 2*d1^2*k^2*(-4 - 10*K + K^2)))*P041 + 2*k*((27 + 45*K + 15*K^2 + K^3 - 2*d1*k*(6 - K + 2*K^2))*P043 + (-7 + 8*K + 3*K^2 + 2*d1^2*k^2*(4 - 2*K + K^2))*P044)) + ...
       2*k^2*(d1^2*(-4 - 10*K + K^2)*P031*P042 + 2*d1*(6 - K + 2*K^2)*(P034*P041 + P033*P042 - P031*P044) - 2*K*(1 + 8*K + K^2)*(P034*P043 - P033*P044)))*S1^2) - ...
   2*B1*B2^2*(2*C1^2*((-d1)*k^2*(12 + 16*K + 5*K^2)*(P034*P041 + P033*P042 - P031*P044) + P032*((2 + K)*(2*d1^2*k^2*(2 + K) + 3*(3 + K))*P041 - ...
         k*(3*K*(3 + K)*P043 - d1*k*(12 + 16*K + 5*K^2)*P043 + 4*d1^2*k^2*(2 + 3*K + K^2)*P044)) - 3*(3 + K)*((2 + K)*P031*P042 + k*K*(P034*P041 - P033*P042 - P031*P044)) + ...
       2*d1^2*k^2*(2 + K)*((-(2 + K))*P031*P042 - 2*k*(1 + K)*(P033*P041 - P034*P042 - P031*P043) + k^2*K*(-4*P034*P043 + 4*P033*P044))) + ...
     C1*(24*k*(P034*P041 - P033*P042 + P032*P043 - P031*P044) + 4*K*(9*P031*P042 + P032*(-9*P041 + 8*k*P043 + 3*k*P044) + k*(3*P033*P041 + 8*P034*P041 - 8*P033*P042 - 3*P034*P042 - 3*P031*P043 - 8*P031*P044) + ...
         k^2*(-6*P034*P043 + 6*P033*P044)) + K^2*(7*P031*P042 + 2*k*(P033*P041 + 5*P034*P041 - 5*P033*P042 - P034*P042 - P031*P043 - 5*P031*P044) - 20*k^2*(P034*P043 - P033*P044) + P032*(-7*P041 + 2*k*(5*P043 + P044))))*S1 - ...
     2*((-(2 + K))*P031*P042 - 4*d1^2*k^3*(2 + 3*K + K^2)*(P033*P041 - P034*P042 - P031*P043) - 8*d1^2*k^4*K*(2 + K)*(P034*P043 - P033*P044) + ...
       k*(P033*((2 + K)^2*P041 - 3*K*(3 + K)*P042) - 4*(P034*P042 + P031*P043) + K*(9*P034*P041 - 4*P034*P042 - 4*P031*P043 - 9*P031*P044) + K^2*(3*P034*P041 - P034*P042 - P031*P043 - 3*P031*P044)) - ...
       k^2*(2 + K)*(2*d1^2*(2 + K)*P031*P042 + d1*(6 + 5*K)*(P034*P041 + P033*P042 - P031*P044) + 8*K*(P034*P043 - P033*P044)) + ...
       P032*((2 + K)*(1 + 2*d1^2*k^2*(2 + K))*P041 + k*(d1*k*(12 + 16*K + 5*K^2)*P043 + 4*P044 - 4*d1^2*k^2*(2 + 3*K + K^2)*P044 + K^2*(3*P043 + P044) + K*(9*P043 + 4*P044))))*S1^2));
       
       
D6=-4*(B2^2*(C1^2*(12*d1*k^2*(2 + K)*(P034*P041 + P033*P042 - P031*P044) - P032*((9 + 4*d1^2*k^2)*(2 + K)*P041 + k*(-9*K*P043 + 12*d1*k*(2 + K)*P043 - 8*d1^2*k^2*(2 + K)*P044)) + ...
       9*((2 + K)*P031*P042 + k*K*(P034*P041 - P033*P042 - P031*P044)) - 4*d1^2*k^2*(2 + K)*((-P031)*P042 + 2*k*((-P033)*P041 + P034*P042 + P031*P043) + k^2*(-4*P034*P043 + 4*P033*P044))) + ...
     6*C1*(4*k*((-P034)*P041 + P033*P042 - P032*P043 + P031*P044) + K*(-2*P031*P042 + k*((-P033)*P041 - 2*P034*P041 + 2*P033*P042 + P034*P042 + P031*P043 + 2*P031*P044) + 4*k^2*(P034*P043 - P033*P044) + ...
         P032*(2*P041 - k*(2*P043 + P044))))*S1 + ((-(2 + K))*P031*P042 - 8*d1^2*k^3*(2 + K)*(P033*P041 - P034*P042 - P031*P043) - 16*d1^2*k^4*(2 + K)*(P034*P043 - P033*P044) + ...
       P032*((1 + 4*d1^2*k^2)*(2 + K)*P041 + k*(9*K*P043 + 12*d1*k*(2 + K)*P043 + 8*P044 + 4*K*P044 - 8*d1^2*k^2*(2 + K)*P044)) + ...
       k*(P033*(4*(2 + K)*P041 - 9*K*P042) - 8*(P034*P042 + P031*P043) + K*(9*P034*P041 - 4*P034*P042 - 4*P031*P043 - 9*P031*P044)) -... 
       4*k^2*(2 + K)*(d1^2*P031*P042 + 4*P034*P043 - 4*P033*P044 + 3*d1*(P034*P041 + P033*P042 - P031*P044)))*S1^2) + ...
   B1*B2*(C1^2*(3*(24 + 11*K + K^2)*P031*P042 + 16*d1^2*k^3*(1 + K)*(P033*P041 - P034*P042 - P031*P043) + 16*d1^2*k^4*(-1 + 2*K)*(P034*P043 - P033*P044) - ...
       6*k*(3 + K)*(P034*((-(3 + K))*P041 + P042) + P033*(-P041 + (3 + K)*P042) + P031*(P043 + (3 + K)*P044)) + P032*((-(4*d1^2*k^2*(5 + 2*K) + 3*(24 + 11*K + K^2)))*P041 + ...
         2*k*(-3*(-(3 + K)^2 + d1*k*(4 + 3*K))*P043 + (8*d1^2*k^2*(1 + K) + 3*(3 + K))*P044)) + 2*k^2*(2*d1^2*(5 + 2*K)*P031*P042 + 3*d1*(4 + 3*K)*(P034*P041 + P033*P042 - P031*P044) - 6*K*(3 + K)*(P034*P043 - P033*P044))) + ...
     C1*((-(108 + 57*K + 7*K^2))*P031*P042 + 4*k^2*(18 + 21*K + 5*K^2)*(P034*P043 - P033*P044) + 2*k*(P033*((-(18 + 9*K + K^2))*P041 + 6*(5 + 7*K + K^2)*P042) + P034*(-6*(5 + 7*K + K^2)*P041 + (18 + 9*K + K^2)*P042) + ...
         P031*((18 + 9*K + K^2)*P043 + 6*(5 + 7*K + K^2)*P044)) + P032*((108 + 57*K + 7*K^2)*P041 - 2*k*(6*(5 + 7*K + K^2)*P043 + (18 + 9*K + K^2)*P044)))*S1 + ...
     2*(2*(1 + 8*K + K^2)*P031*P042 - 8*d1^2*k^3*(1 + K)*(P033*P041 - P034*P042 - P031*P043) - 8*d1^2*k^4*(-1 + 2*K)*(P034*P043 - P033*P044) + ...
       k*(P033*((1 + 8*K + K^2)*P041 - 3*(3 + K)^2*P042) + P034*(3*(3 + K)^2*P041 - (1 + 8*K + K^2)*P042) - P031*((1 + 8*K + K^2)*P043 + 3*(3 + K)^2*P044)) + ...
       P032*(2*(-1 - 8*K - K^2 + d1^2*k^2*(5 + 2*K))*P041 + k*(3*((3 + K)^2 + d1*k*(4 + 3*K))*P043 + (1 + 8*K + K^2 - 8*d1^2*k^2*(1 + K))*P044)) - ...
       k^2*(2*d1^2*(5 + 2*K)*P031*P042 + 3*d1*(4 + 3*K)*(P034*P041 + P033*P042 - P031*P044) + 4*(1 + 8*K + K^2)*(P034*P043 - P033*P044)))*S1^2) + ...
   B1^2*(C1^2*(2*(9 + 12*K + K^2)*P031*P042 - 8*d1^2*k^3*(4 + 3*K)*(P033*P041 - P034*P042 - P031*P043) - 16*d1^2*k^4*(1 + 3*K)*(P034*P043 - P033*P044) + ...
       k*(9 + 12*K + K^2)*(P033*(P041 - 3*P042) + P034*(3*P041 - P042) - P031*(P043 + 3*P044)) + P032*(2*(-9 - 12*K - K^2 + 2*d1^2*k^2*(7 + 3*K))*P041 + ...
         k*(3*(9 + 12*K + K^2 + 2*d1*k*(8 + 5*K))*P043 + (9 + 12*K + K^2 - 8*d1^2*k^2*(4 + 3*K))*P044)) - 2*k^2*(2*d1^2*(7 + 3*K)*P031*P042 + 3*d1*(8 + 5*K)*(P034*P041 + P033*P042 - P031*P044) + ...
         2*(9 + 12*K + K^2)*(P034*P043 - P033*P044))) + 3*C1*((-(36 + 21*K + K^2))*P031*P042 + 4*k^2*K*(5 + K)*(P034*P043 - P033*P044) + P032*((36 + 21*K + K^2)*P041 - 2*k*((13 + 11*K + K^2)*P043 + (3 + 2*K)*P044)) + ...
       2*k*((-P034)*((13 + 11*K + K^2)*P041 - (3 + 2*K)*P042) + P033*((-(3 + 2*K))*P041 + (13 + 11*K + K^2)*P042) + P031*((3 + 2*K)*P043 + (13 + 11*K + K^2)*P044)))*S1 + ...
     ((106 + 35*K + K^2)*P031*P042 + 8*d1^2*k^3*(4 + 3*K)*(P033*P041 - P034*P042 - P031*P043) + 16*d1^2*k^4*(1 + 3*K)*(P034*P043 - P033*P044) + ...
       k*(P034*(3*(9 + 12*K + K^2)*P041 + (-17 + 2*K + K^2)*P042) - P033*((-17 + 2*K + K^2)*P041 + 3*(9 + 12*K + K^2)*P042) + P031*((-17 + 2*K + K^2)*P043 - 3*(9 + 12*K + K^2)*P044)) - ...
       P032*((106 + 35*K + K^2 + 4*d1^2*k^2*(7 + 3*K))*P041 + k*(-3*(9 + 12*K + K^2 - 2*d1*k*(8 + 5*K))*P043 + (-17 + 2*K + K^2 - 8*d1^2*k^2*(4 + 3*K))*P044)) + ...
       2*k^2*(2*d1^2*(7 + 3*K)*P031*P042 + 3*d1*(8 + 5*K)*(P034*P041 + P033*P042 - P031*P044) - 2*(-1 + K + 2*K^2)*(P034*P043 - P033*P044)))*S1^2));
       
       
D7=-3*(C1 - S1)*(2*B1*(2*C1*(2*(3 + K)*P031*P042 + 4*d1^2*k^3*((-P033)*P041 + P034*P042 + P031*P043) + k*(3 + K)*(3*P034*P041 + P033*(P041 - 3*P042) - P034*P042 - P031*P043 - 3*P031*P044) + 8*d1^2*k^4*((-P034)*P043 + P033*P044) + ...
       P032*(2*(-3 + d1^2*k^2 - K)*P041 + k*(3*(3 + 2*d1*k + K)*P043 + (3 - 4*d1^2*k^2 + K)*P044)) - 2*k^2*(d1^2*P031*P042 + 3*d1*(P034*P041 + P033*P042 - P031*P044) + 2*(3 + K)*(P034*P043 - P033*P044))) + ...
     (-3*(8 + K)*P031*P042 + 8*d1^2*k^3*((-P033)*P041 + P034*P042 + P031*P043) - 16*d1^2*k^4*(P034*P043 - P033*P044) + P032*((4*d1^2*k^2 + 3*(8 + K))*P041 - 2*k*((9 - 6*d1*k + 3*K)*P043 + (3 + 4*d1^2*k^2)*P044)) - ...
       6*k*(P034*((3 + K)*P041 - P042) + P033*(P041 - (3 + K)*P042) - P031*(P043 + (3 + K)*P044)) - 4*k^2*(d1^2*P031*P042 - 3*K*P034*P043 + 3*K*P033*P044 + 3*d1*(P034*P041 + P033*P042 - P031*P044)))*S1) + ...
   B2*(C1*(3*(8 + K)*P031*P042 + 16*d1^2*k^3*(P033*P041 - P034*P042 - P031*P043) + 32*d1^2*k^4*(P034*P043 - P033*P044) + P032*((-(8*d1^2*k^2 + 3*(8 + K)))*P041 + 2*k*(3*(3 - 4*d1*k + K)*P043 + (3 + 8*d1^2*k^2)*P044)) + ...
       6*k*(P034*((3 + K)*P041 - P042) + P033*(P041 - (3 + K)*P042) - P031*(P043 + (3 + K)*P044)) + 4*k^2*(2*d1^2*P031*P042 - 3*K*P034*P043 + 3*K*P033*P044 + 6*d1*(P034*P041 + P033*P042 - P031*P044))) + ...
     (24*d1*k^2*(P034*P041 + P033*P042 - P032*P043 - P031*P044) + 6*k*(P031*P043 - 3*P032*P043 + P034*(-3*P041 + P042 + 8*k*P043) + 3*P031*P044 - P032*P044 - P033*(P041 - 3*P042 + 8*k*P044)) + ...
       K*(-5*P031*P042 + P032*(5*P041 - 6*k*P043 - 4*k*P044) + k*(-4*P033*P041 - 6*P034*P041 + 6*P033*P042 + 4*P034*P042 + 4*P031*P043 + 6*P031*P044) + 4*k^2*(P034*P043 - P033*P044)) - ...
       8*d1^2*k^2*((-P031)*P042 + 2*k*((-P033)*P041 + P034*P042 + P031*P043) + P032*(P041 - 2*k*P044) + k^2*(-4*P034*P043 + 4*P033*P044)))*S1));
       
       
       
D8=9*(-2*P031*P042 + k*((-P033)*P041 - 3*P034*P041 + 3*P033*P042 + P034*P042 + P031*P043 + 3*P031*P044) + 4*k^2*(P034*P043 - P033*P044) + P032*(2*P041 - k*(3*P043 + P044)))*(C1 - S1)^2;

       
function [N1,N2,N3,D1,D2,D3] = antiplane_2visc_terms(PzsF,B1,B2,k,d1,P0,u)

Ph11=P0(1,1);Ph12=P0(1,2);
Ph21=P0(2,1);Ph22=P0(2,2);

C1=cosh(abs(k)*d1); Z1=sinh(abs(k)*d1);

Pf2=PzsF(2);

N1= -4*B1*B2*C1*Pf2*Ph11 + 4*B1^2*Pf2*Ph11*Z1;

N2= -2*B1*C1*Pf2*Ph11 - 2*B2*C1*Pf2*Ph11 + 4*B1*Pf2*Ph11*Z1 + 2*B1*C1*Pf2*Ph12*u*abs(k)...
    - 2*B2*Pf2*Ph12*u*Z1*abs(k);

N3= (-C1)*Pf2*Ph11 + Pf2*Ph11*Z1 + C1*Pf2*Ph12*u*abs(k) - Pf2*Ph12*u*Z1*abs(k);


D1= 4*B1*B2*C1*Ph21 - 4*B1^2*Ph21*Z1;

D2= 2*B1*C1*Ph21 + 2*B2*C1*Ph21 - 4*B1*Ph21*Z1 - 2*B1*C1*Ph22*u*abs(k) + 2*B2*Ph22*u*Z1*abs(k);

D3= C1*Ph21 - Ph21*Z1 - C1*Ph22*u*abs(k) + Ph22*u*Z1*abs(k);
   
